webpackJsonp([0x6eb5135a5fd4],{422:function(e,t){e.exports={data:{site:{siteMetadata:{title:"5 minutes of React",author:"5 minutes of React"}},markdownRemark:{id:"/Users/petr/www/5minreact.audio/src/pages/021-bitbucket-pipelines/index.md absPath of file >>> MarkdownRemark",html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/429023142&color=%23ff5500&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"></iframe>\n<p>Today I’d like to introduce you to Bitbucket Pipelines, a continuous integration and continuous delivery cloud service that I’ve been using quite a lot lately. Personally, I find Bitbucket Pipelines extremely useful for several reasons…</p>\n<p>Bitbucket pipelines I am using now: <a href="https://bitbucket.org/product/features/pipelines">https://bitbucket.org/product/features/pipelines</a></p>\n<p>Cirrus CI I am going to try next: <a href="https://medium.com/cirruslabs/introducing-cirrus-ci-a75cd1f49af0">https://medium.com/cirruslabs/introducing-cirrus-ci-a75cd1f49af0</a></p>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>Today I’d like to introduce you to Bitbucket Pipelines, a continuous integration and continuous delivery cloud service that I’ve been using quite a lot lately.</p>\n<p>The first public beta version was announced in the fall of 2016, and in the summer of 2017 the service was promoted from beta to production.</p>\n<p>I’ve been experimenting with it since the end of 2017, so for now it’s been just a few months.</p>\n<p>First and foremost, Bitbucket Pipelines is a continuous integration service seamlessly connected with the Bitbucket repository storage.</p>\n<p>Just like in all cutting-edge CI systems these days, we need to add a certain file — in this case, bitbucket-pipelines.yml — to the root of the repository, so that the tasks defined in this file can run on every push to Bitbucket. These tasks will run in Docker containers entirely within the Bitbucket server infrastructure, so you don’t have to worry about setting up your own servers, agents, or workers.</p>\n<p>Besides, any Docker image can be used as a base image, unlike, for example, in Travis CI, which, as far as I recall, offers only a limited range of base images. I’ve made a few of my own custom images that include all the necessary language versions, extensions and third-party tools.</p>\n<p>To anyone who has worked with Travis or GitLab, the bitbucket-pipelines.yml file looks pretty typical and familiar. The main entity is the pipeline, attached to branches or tags in the source code. You can also use glob patterns for matching branch names and tags.</p>\n<p>The pipeline can be organized into a set of steps. They run in order of appearance, and if any step produces an error, subsequent steps won’t be executed. A step can be configured to run automatically or manually. For example Manual trigger is convenient for setting up deployment on click. Each step starts off with a clean slate as a fresh Docker container that automatically has access to all the application source code (repository is cloned into container automatically). You can pass artifacts, such as files and build or compilation results, from one step to another.</p>\n<p>Within a step, you define tasks, which are, essentially, command line instructions. For instance, I can run:\nnpm ci</p>\n<p>followed by:\nnpm test.</p>\n<p>To avoid downloading npm packages again and again, the service has a caching mechanism. It provides pre-defined caches for npm and other package managers out of the box, but you could also define your own rules for caching any particular directory.</p>\n<p>Now, what if you need a database like MySQL or PostgreSQL for testing? In terms of Bitbucket Pipelines, these are “services”. You can launch up to five additional services alongside the main container, and they will run as separate Docker containers that can be addressed by their corresponding names via the local network.</p>\n<p>What’s more, one of the services can be the Docker daemon itself, allowing you to create custom images inside of the pipeline which you can then push to Docker Hub or to a private repository.</p>\n<p>The total RAM limit for the main container and all the additional services is 4Gb. Optionally, you can allocate twice as much memory to the build by specifying “size: 2x” in the yml file.</p>\n<p>Private data like tokens or passwords can be stored as environment variables that you can set up via the Bitbucket web interface.</p>\n<p>Bitbucket famously offers free private repositories for teams of 5 or less collaborators. And they can also run Pipelines for free! Although they’re limited to 50 minutes a month. And it’s barely enough. Even if you only run nightly scheduled builds as opposed to building on every push, you’ll do 30 builds a month, which leaves less than 2 minutes for each build. In practice, launching the main container along with the MariaDB container, as well as cloning the repository and unpacking the npm cache, already takes at least 1 or 2 minutes and sometimes can slow down to 5 or 10.</p>\n<p>Then there is the subscription plan of 1000 minutes for $10 a month, which looks much better. I set up a few of my projects and used up only 300 minutes in the first month. So I passed all my Docker image builds over to Bitbucket Pipelines, and made even better use of it.</p>\n<p>What are the downsides? The syntax of bitbucket-pipelines.yml doesn’t allow reusing your custom configuration snippets. Imagine I’ve described a pipeline for the master branch composed of several steps with a few dozen tasks each. What if I want to describe a similar pipeline for the staging branch where the first step is the same, and the second one is different? I have no choice but copy big chunks of configuration from the master pipeline over to the staging pipeline.</p>\n<p>As for debugging, there is a Python script that sets up the entire environment locally, but I haven’t tried it out yet. Instead, I’ve done live debugging, and it takes quite a while. To make life a bit easier, there is an online validator for the bitbucket-pipelines.yml file that not only fixes indentations, but also checks internal logic and parameter spelling.</p>\n<p>Unfortunately, Bitbucket offers no build matrix system that could be handy for running tests against multiple versions of NodeJS or the database. You end up creating many pipelines that are nearly identical except for the tag in the Docker image. For those who develop libraries or out-of-the-box products, this is a living hell. But if you are testing an internal product that is meant to work with a certain version of NodeJS, you have nothing to worry about.</p>\n<p>Inside of the Bitbucket web interface, the process of running the pipelines and analyzing the results is seamlessly integrated with the repositories. In addition, it offers integration with Slack, HipChat, and other services. Furthermore, in Sourcetree, the GUI client for Git and Mercurial also owned by Atlassian, build status is indicated right next to each commit. Sourcetree can also show system notifications whenever there is a build failure.</p>\n<p>Personally, I find Bitbucket Pipelines extremely useful for several reasons:</p>\n<ul>\n<li>First, my configurations are quite simple, and I don’t really need the full power of Jenkins or TeamCity</li>\n<li>I don’t like hosting anything myself. Even though GitLab workers can be set up in a snap, not having to configure anything at all in my own infrastructure is a major plus for me.</li>\n<li>As I already keep all my source code in Bitbucket repositories, a well-integrated CI system is a real treat.</li>\n<li>I still use Mercurial for some projects, and Bitbucket Pipelines plays very well with it as it can clone Mercurial repositories and filter by bookmarks.</li>\n<li>$10 for 1000 minutes per month is both very affordable and sufficient.</li>\n</ul>\n<p>If you haven’t set up your continuous integration workflow yet and you keep your repositories at Bitbucket, definitely check out Bitbucket Pipelines. You can get it up and running in no time.</p>\n<p>And if you have your own continuous integration server and supporting or updating it takes too much time and effort, Bitbucket Pipelines can be a great way to save you the trouble.</p>\n<p>Of course, Bitbucket Pipelines isn’t the only service to meet these needs. Its most famous alternatives are Travis CI, Circle CI and GitLab CI. Recently I’ve also stumbled upon a new project called Cirrus CI, and it looks intriguing. Perhaps it will be the next cloud CI service I’ll turn to in case I run into any limitations with Bitbucket Pipelines.</p>\n<p>Use Continues Integration and prosper! </p>',frontmatter:{title:"#21 - Bitbucket Pipeliens",date:"April 13, 2018"}}},pathContext:{slug:"/021-bitbucket-pipelines/",previous:{fields:{slug:"/020-in-the-loop-jsconf-asia-2018/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/424143567&color=%23ff5500&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"></iframe>\n<p>The other day I got to watch a few talks from JSConf Asia 2018 on Youtube. There are 39 of them in the playlist, so I picked a random one. And I got so lucky I just had to make this episode about it! The talk was “In the Loop” by Jake Archibald.</p>\n<p>Jake is developer advocate for Google Chrome. He’s one of the editors of the service worker spec, so he’s into offline-first, push messaging and web performance.</p>\n<ul>\n<li><a href="https://www.youtube.com/playlist?list=PL37ZVnwpeshFqN5dcZ704lxI3F5iHDYkl">https://www.youtube.com/playlist?list=PL37ZVnwpeshFqN5dcZ704lxI3F5iHDYkl</a> - JSConf.Asia 2018</li>\n<li><a href="https://youtu.be/cCOL7MC4Pl0">https://youtu.be/cCOL7MC4Pl0</a> - Jake Archibald: In The Loop</li>\n<li><a href="https://youtu.be/rLgBqT_e6Yo">https://youtu.be/rLgBqT_e6Yo</a> - Feross Aboukhadijeh: JavaScript Pranks</li>\n<li><a href="https://twitter.com/jaffathecake">https://twitter.com/jaffathecake</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>The other day I got to watch a few talks from JSConf Asia 2018 on Youtube. There are 39 of them in the playlist, so I picked a random one. And I got so lucky I just had to make this episode about it! The talk was “In the Loop” by Jake Archibald.</p>\n<p>Jake is a well-known figure in the Javascript world: he works at Google, writes articles, and talks at conferences.</p>\n<p>“In the Loop”, as you can guess from the title, explains how the event loop works in Javascript, in particular in the browser environment.</p>\n<p>The event loop has already been discussed in countless articles, talks and lectures. I can’t weigh up all of them, but Jake Archibald’s talk is definitely a gem. He presents it in a very clear and comprehensible way, and the talk is consistent, logical, and visual.</p>\n<p>Here are some things you can learn from it:\n— What a task is from the event loop perspective, and what can cause an interface to stutter\n— How setTimeout works\n— How requestAnimationFrame is different setTimeout\n— When exactly requestAnimationFrame gets called and how it fits into the event loop\n— Why requestAnimationFrame in peculiar Safari\n— What are micro-tasks, what makes them different from ordinary tasks, and how it all ties in with requestAnimationFrame\n— Why initiating events via Javascript (for instance, via a click trigger) makes them behave differently compared to a native event set off by the user’s actions in the browser, and why all of this can break your tests</p>\n<p>In short, it’s all very interesting, rigorous, and deep.</p>\n<p>And, of course, the animated slides are amazing. And I don’t mean any kitty gifs (of which there were none) or mere slide transitions. I’m talking about visualized events within the event loop, the entire algorithm illustrated by a little square rushing through the loop ­— which is very impressive.</p>\n<p>Even the chunks of code are presented very thoughtfully. For instance, first we look at the code that uses the setTimeout function, and then Jake invites us to try out the requestAnimationFrame alternative. It’s visualized as if we were erasing “setTimeout” with backspace and typing “requestAnimationFrame”, which is very intuitive, natural, and easy to follow. For those of you who give talks or prepare slides: definitely check it out, this is a great tip.</p>\n<p>Then I felt like watching another video. Apparently the JSConf Asia lineup had a whole series of short 5-minute talks. Again, my random pick was great: a gorgeous demonstration of a prank in Javascript. The speaker was showing small snippets of code that were generating endless alerts, not letting the victim close the window, sticking a cat into the clipboard when this evil page was clicked, etc. These may seem like old tricks, but the page in the last demo had all of this nasty code at once and it was hilarious. With everything bouncing and flying, some videos popping up all the time, with no way of closing anything — it was quite a show, and a great idea for a 5-minute talk. Check it out and have a good laugh!</p>\n<p>And that’s all I wanted to share for now.</p>\n<p>Code with React and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/424143567&color=%23ff5500&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"></iframe>\n\nThe other day I got to watch a few talks from JSConf Asia 2018 on Youtube. There are 39 of them in the playlist, so I picked a random one. And I got so lucky I just had to make this episode about it! The talk was "In the Loop" by Jake Archibald.\n\nJake is developer advocate for Google Chrome. He\'s one of the editors of the service worker spec, so he\'s into offline-first, push messaging and web performance.\n\n- https://www.youtube.com/playlist?list=PL37ZVnwpeshFqN5dcZ704lxI3F5iHDYkl - JSConf.Asia 2018\n- https://youtu.be/cCOL7MC4Pl0 - Jake Archibald: In The Loop\n- https://youtu.be/rLgBqT_e6Yo - Feross Aboukhadijeh: JavaScript Pranks\n- https://twitter.com/jaffathecake\n\n',frontmatter:{title:"#20 - Jake Archibald: In The Loop (JSConf.Asia 2018)",date:"April 3, 2018"}},next:{fields:{slug:"/022-the-phoenix-project-book/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/501596445&color=%23ff5500&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"></iframe>\n<p>I recently read a book called “The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win”.</p>\n<p>All in all, it is very inspiring book. So I would highly recommend you give it a read.</p>\n<p><a href="https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/1942788290/">https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/1942788290/</a></p>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>I recently read a book called “The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win”.</p>\n<p>It’s a fictional story of an IT department in a large auto parts retail company.</p>\n<p>The first half of the book was a blast: it realistically portrays the whirlwind of chaos and red tape so typical for large enterprises, where the left hand doesn’t know what the right hand is doing.</p>\n<p>Take that episode when one department pushes their migrations to production and leaves another team battling conflicts in their release.</p>\n<p>Or when they have to update to a new version by morning, before the stores open up, and by the looks of it they’ll need a whole day or two.</p>\n<p>Each and every business manager calls IT and support directly to deal with their absolute top priority task right here and right now.</p>\n<p>Everyone is too busy to write tests, and there are none. Or the tests that do exist take way too long as the release deadline is drawing near.</p>\n<p>Not to mention the nitpicky security guys with their countless restrictions.</p>\n<p>Many of us find these situations more or less familiar. I certainly do, and this is what made this book so exciting, almost like a thriller: you never know which system is going to fail next.</p>\n<p>The other half of the book is about sorting things out. The team discovers the theory of constraints, kanban, and lean production. They improve cooperation between departments, build up a stronger team spirit, and eventually get back on track. </p>\n<p>Now, here’s what I didn’t like.</p>\n<p>The second half of the book paints a rosy picture of transformation, and it’s just too good to be true.</p>\n<p>Another issue is the time frame. The story takes place over three or four months that turn out to be enough to get from a complete mess to a top-notch IT department. We’re talking about a large enterprise that employs thousands of people, with several hundred working in IT. It’s a huge company with its own complex organizational structure and bureaucracy. What’s more, not just the IT department as a whole, but also the individual characters change as if by magic, like the security douchebag who spends a night drinking at the bar, then suddenly stops being a pain and turns into a helpful team player. How’s that for a metamorphosis?</p>\n<p>Finally, the main character doesn’t feel very plausible. In part one he gets promoted from a middle management position straight to VP of IT Operations (apparently after his predecessor resigns). That’s a major leap up the career ladder to the point where he’s now the boss of his former boss. We know nothing about how good he was at his previous job, but here all of a sudden he shines as a leader, direct and consistent, and, if need be, ruthless and uncompromising. What was a natural like that doing plodding away in the back office?</p>\n<p>But so be it — after all, it’s a fictional novel that doesn’t pretend to be a biography or tell a true story. The book is a compelling and easy read, and it took me just a couple of days to finish. </p>\n<p>All in all, The Phoenix Project is very inspiring book. It truly makes you want to do things right. As the saying goes, no pain, no gain. So I would highly recommend you give it a read.</p>\n<p>However, if the book doesn’t seem that compelling and doesn’t hook you right away, there’s little point in ploughing through it as it won’t give you any unique insights or recommendations on how to run an IT department. A few concepts like kanban are mentioned here and there as the protagonist discovers them, but there’s little more than vague depictions.</p>\n<p>For precise techniques, you would need something different — like the DevOps Handbook, for instance.</p>\n<p>That’s it for this literary episode. Shout out in the comments if you like it, and I’ll grab another book to review.</p>\n<p>Read books and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/501596445&color=%23ff5500&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"></iframe>\n\nI recently read a book called “The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win”.\n\nAll in all, it is very inspiring book. So I would highly recommend you give it a read.\n\nhttps://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/1942788290/\n\n\n',frontmatter:{title:"#22 - The Phoenix Project",date:"September 18, 2018"}}}}}});
//# sourceMappingURL=path---021-bitbucket-pipelines-692d1aebfec89bf27f96.js.map