webpackJsonp([19972854867710],{404:function(e,t){e.exports={data:{site:{siteMetadata:{title:"5 minutes of React",author:"5 minutes of React"}},markdownRemark:{id:"/Users/petr/www/5minreact.audio/src/pages/006-runtyper/index.md absPath of file >>> MarkdownRemark",html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/322512146&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<p>Analyzing React’s Source Code for Type Mismatch Operations with a new Babel plugin: Runtyper. </p>\n<ul>\n<li><a href="https://github.com/vitalets/babel-plugin-runtyper">https://github.com/vitalets/babel-plugin-runtyper</a></li>\n<li><a href="https://medium.com/dailyjs/analyzing-reacts-source-code-for-type-mismatch-operations-9ca065e5b91">https://medium.com/dailyjs/analyzing-reacts-source-code-for-type-mismatch-operations-9ca065e5b91</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>One smart guy, Vitaliy Potapov, wrote a babel plugin for runtime type-checking in JavaScript. After testing the plugin on his own projects he applied it to React’s source code and got some interesting results. In this podcast, I will tell you some facts from that experiment described on a Medium post made by Vitaly.</p>\n<p>What is checked?\nEvery math or comparison operation with different types in JavaScript is potentially unsafe. You can get silent unexpected result because values are converted by tricky rules. For example, 1 + 1 = 2 but if you accidentally add 1 + 1 as a string, you will get a string value 11. To avoid such errors you can use Flow, TypeScript or check operand types in runtime. I will apply the last approach to the React source code.</p>\n<p>How it works?\nThe plugin called Runtyper wraps every operation into a function that performs some additional type checking. The plugin guess types by code itself with no manual annotations needed. That allows to apply such checking to any existing project with minimal effort. Let’s try it on React.</p>\n<p>Plan</p>\n<ol>\n<li>Get the React source code.</li>\n<li>Include Runtyper into the build process.</li>\n<li>Run all of React’s unit tests and analyze the output.</li>\n</ol>\n<p>While setting up Runtyper for this experiment with React, author allowed some rules because the default configuration of plugin is very strict. For example, implicitAddStringNumber option allows concatenation ofstring + number. It is widely used in React code and will noise results if disabled.</p>\n<p>Also hi disabled a few lines in DOMProperty.js and Transaction.js. React executes these lines many times and their warnings overfill the output. In results section he covers what is happening there.</p>\n<p>React uses Jest for self-testing. so all tests results were piped output to log.txt for later analysis.</p>\n<p>When tests finished there were 33 unique places with type-mismatch operations. full log published for everybody’s access.</p>\n<p>In his post on Medium Vitaliy analyzes 5 most interesting cases he found in React source code - there are code examples you better look in text, than in audio podcast.</p>\n<p>As Conclusion it was interesting experiment to perform runtime type-checking of React source code. Most of warnings are just “info” and intended by React design. Some can be fixed. Finally Vitaliy created two pull requests to React repositry.</p>\n<p>Read the full article and try Runtyper Babel plugin, links are in shownotes.</p>\n<p>Code with React and Prosper!</p>',frontmatter:{title:"#6 - Runtyper",date:"May 14, 2017"}}},pathContext:{slug:"/006-runtyper/",previous:{fields:{slug:"/005-idiomatic-redux/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/322367043&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<p>Mark Erikson, one of Redux contributors, has published an article in his Idiomatic Redux series: “The Tao of Redux, Part 1 - Implementation and Intent.” Thoughts on what Redux requires, how Redux is intended to be used, and what is possible with Redux.</p>\n<ul>\n<li><a href="http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/">http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/</a></li>\n<li><a href="http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/">http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>Mark Erikson, one of Redux contributors, has published another article in his Idiomatic Redux series.</p>\n<p>The article is called “The Tao of Redux, Part 1 - Implementation and Intent”. It was a great read; Mark has made a considerable effort to study older discussions of Redux issues on Github as well as various posts and comments by Dan Abramov to tell us about the original ideas, goals, and decisions that emerged from designing Redux. This turned out to be a very thorough and detailed overview.</p>\n<p>In this podcast I will indicate the main points of the article. So let’s get going!</p>\n<p>First of all, Mark debunks a few myths about some of the basic redux requirements.</p>\n<p>Let’s start by taking a look at the now-famous Three Principles of Redux:</p>\n<ol>\n<li>Single source of truth: The state of your whole application is stored in an object tree within a single store.</li>\n<li>State is read-only: The only way to change the state is to emit an action, an object describing what happened.</li>\n<li>Changes are made with pure functions: To specify how the state tree is transformed by actions, you write pure reducers.</li>\n</ol>\n<p>In a very real sense, each one of those statements is a lie!</p>\n<p>“Single source of truth” is wrong, because (per the Redux FAQ), you don’t have to put everything into Redux, the store state doesn’t have to be an object, and you don’t even have to have a single store.\n“State is read-only” is wrong, because there’s nothing that actually prevents the rest of the application from modifying the current state tree.\nAnd “Changes are made by pure functions” is wrong, because the reducer functions could also mutate the state tree directly, or kick off other side effects.</p>\n<p>These principles aren’t fixed rules or literal statements about the implementation of Redux. Rather, they form a statement of intent about how Redux should be used.</p>\n<p>Moreover, the immutability of the state tree itself is a cornerstone of Redux as it contains a few smart optimizations that involve a simple comparison of objects by reference. It happens twice: first in the Redux itself before any calls to subscribers, and then independently in the react-redux package as a part of the connect method which also performs a shallow comparison of all current component props with previous props. Redux itself won’t break if state is mutated. Redux will just not notify subscribers (when the whole state object reference is the same), or connected components won’t be rerendered (when particular slice of the state is mutated so it’s shallow equal).</p>\n<p>We also know that action objects should be serializable, in other words, they shouldn’t contain symbols, promises, and such. In fact, this is not an actual Redux requirement, but rather a recommendation that is meant to facilitate debugging and is crucial for time travel debugger.</p>\n<p>Redux’s primary goal is to make state mutations predictable.</p>\n<p>Constraints like immutability and serializability largely exist to make those development use cases possible, as well as making it easier for developers to trace data flow and update logic.</p>\n<p>Redux combines those multiple “stores” into a single state tree to make debugging, state persistence, and features like undo/redo easier to work with.</p>\n<p>Intended design and use of Redux was following:</p>\n<ul>\n<li>Redux Was Built As A Flux Architecture Implementation</li>\n<li>State Update Maintainability Is The Main Priority</li>\n<li>Action History Should Have Semantic Meaning:  action types should have some kind of meaning and information. The Redux DevTools and other logging utilities display the type field for each dispatched action. If only a single action type is used across the entire codebase (like SET_DATA), it will be harder to track down where a particular action was dispatched from, and the history log will be less readable.</li>\n<li>Redux Is Intended To Introduce Functional Programming Principles: this includes FP basics such as immutability and pure functions and ideas such as composing functions together to achieve a larger task. But not going deep into abstract FP concepts like “monads” or “endofunctors”.</li>\n<li>Redux Promotes Testable Code</li>\n<li>Reducer Functions Should Be Organized By State Slice</li>\n<li>Update Logic And Data Flow Are Explicit: Redux does not contain any “magic”, everything is intended to be explicit, clear, and traceable, with minimal abstraction.</li>\n<li>Redux’s API Should Be Minimal: The best API is often no API. </li>\n<li>Redux Should Be As Extensible As Possible. This ties in with the “minimal API” goal.</li>\n</ul>\n<p>Mark, the author of the article, has certainly dedicated a lot of time to researching and reading back through early issues and discussions.</p>\n<p>A substantial list of links to the sources is provided at the end of the article.</p>\n<p>Read the full article to get more info.\n<a href="http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/">http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/</a>\n<a href="http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/">http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/</a></p>\n<p>Thank you, Mark, for your effort and for your excellent content!</p>\n<p>Code with React and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/322367043&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n\nMark Erikson, one of Redux contributors, has published an article in his Idiomatic Redux series: "The Tao of Redux, Part 1 - Implementation and Intent." Thoughts on what Redux requires, how Redux is intended to be used, and what is possible with Redux.\n\n- http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-1/\n- http://blog.isquaredsoftware.com/2017/05/idiomatic-redux-tao-of-redux-part-2/\n\n',frontmatter:{title:"#5 - Idiomatic Redux",date:"May 13, 2017"}},next:{fields:{slug:"/007-amsterdam-pwa-realworld-prepack/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/323677823&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<p>News: </p>\n<ul>\n<li>React Amsterdam 2017</li>\n<li>Hacker News readers as Progressive Web Apps written in React, Preact, Svelte, Vue, Angular and viperHTML</li>\n<li>TodoMVC for the RealWorld™ — Exemplary fullstack Medium.com clone powered by React, Angular, Node, Django, and many more</li>\n<li>Prepack - a tool for making JavaScript code run faster.</li>\n</ul>\n<p>Links:</p>\n<ul>\n<li><a href="https://twitter.com/ReactAmsterdam">https://twitter.com/ReactAmsterdam</a></li>\n<li><a href="https://www.youtube.com/playlist?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M">https://www.youtube.com/playlist?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M</a> - React Amsterdam 2017 playlist</li>\n<li><a href="https://youtu.be/3J9EJrvqOiM?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M">https://youtu.be/3J9EJrvqOiM?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M</a> - Complexity: Divide and Conquer</li>\n<li><a href="http://divideandconquer.surge.sh/#1">http://divideandconquer.surge.sh/#1</a></li>\n<li><a href="https://github.com/tastejs/hacker-news-pwas">https://github.com/tastejs/hacker-news-pwas</a></li>\n<li><a href="https://medium.com/@ericsimons/introducing-realworld-6016654d36b5">https://medium.com/@ericsimons/introducing-realworld-6016654d36b5</a></li>\n<li><a href="https://github.com/gothinkster/realworld">https://github.com/gothinkster/realworld</a></li>\n<li><a href="https://prepack.io">https://prepack.io</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>On the 21st of April 2017 the yearly React Amsterdam conference took place. It is a major event in the React world, and interesting reports and videos have already been posted. The conference was divided into a main track for React and another one for React Native. The organizers have launched a contest for the best conference review post, and React Amsterdam’s Twitter page is constantly updated with links to new materials.</p>\n<p>A talk called «Complexity: Divide and Conquer» by Michel Weststrate, the MobX creator, particularly caught my attention. Its main point was breaking tasks into smaller ones. It is a simple and ordinary piece of advice, but the example Michael presented is much less obvious: a bookstore website where the UI is fundamentally separated from the business logic. First we can see the website where a book can be selected, added to cart and checked out. Then the whole application render is removed, and the browser screen turns empty, but we can still choose a book, add it to cart, and purchase it by calling certain methods on Store object in the console. Meanwhile, the application responds properly to changing the URL in the browser, the server receives the requests correctly, and the necessary data gets loaded.</p>\n<p>This can be achieved by following a few hygiene rules. React’s Life cycle methods should be avoided, in particular componentDidMount, which is often used to request data from the server. Additionally, the router shouldn’t select the components to render on its own, but rather change the state in Store. These and other useful tips will certainly help us divide and conquer!</p>\n<p>Another point for today’s podcast, apart from React Amsterdam, are Progressive web apps. You can check out the repository with PWA implemented in several frameworks: React, Preact, Svelte, Vue, Angular, and viperHTML. The application itself is a clone of Hacker News.</p>\n<p>If Hacker News clones are not your thing, here is a similar initiative: a blog platform called Real World, which is written using different technology stacks. </p>\n<p>What’s interesting is that apart from such front-end frameworks as React and Elm, the Real World repository also contains back-end implementations, including Node Express, Django, Rails, and Laravel. All of them rely on the same API, the front end is separate from the back end, and they can be combined. The author is planning to implement more examples based on various front- and back-end technologies, and contributors are welcome. There is a Medium post to accompany the repository.  </p>\n<p>Another Hot topic is the Prepack tool which speeds up JavaScript code initialization. A sensational new project by the Facebook team! It is still in early development and is not recommended for production use, but Twitter is already full of application benchmarks that show double startup speed.</p>\n<p>Prepack is a tool used on application source code, transforming it in order to speed up initialization at runtime. The idea is simple: any static computations that can be done at compile time should be done at compile time and not at runtime. Here is a clear example: imagine we want to write:</p>\n<p>const x = 2 + 3;</p>\n<p>this source code line would better be written as</p>\n<p>const x = 5</p>\n<p>to avoid computation while running the program in the browser or on the node.</p>\n<p>Internally Prepack uses Babel to parse the source code and construct an abstract syntactic tree (AST). Then it needs to be able to interpret Javascript code and evaluate expressions, and it can indeed do that! </p>\n<p>At the core of Prepack is an almost ECMAScript 5 compatible interpreter — implemented in JavaScript! The interpreter closely follows the ECMAScript 2016 Language Specification, with a focus on correctness and spec conformance. You can think of the interpreter in Prepack as a clean reference implementation of JavaScript.</p>\n<p>The interpreter has the ability to track and undo all effects, including all object mutations. This enables speculative optimizations.</p>\n<p>In addition to elementary Javascript expressions, Prepack optimization makes use of symbolic expressions traversing all possible options. For example, Date.now can return an abstract value. Prepack tracks all operations that are performed over abstract values. When branching over abstract values, Prepack will fork execution and explore all possibilities. Thus, Prepack implements a Symbolic Execution engine for JavaScript.</p>\n<p>There is a roadmap on prepack.io website. In the near future the developers plan to integrate Prepack into React Native tool chain and build some optimizations based on assumptions of the module system used by React Native.</p>\n<p>Medium term goals include full ECMAScript 6 conformance and lots of further optimizations, such as elimination of unused exported properties (similar to what treeshake in webpack does, although webpack can’t compute js code and only operates on AST level, so Prepack is expected to do a more thorough cleanup than webpack).</p>\n<p>In the long run the team plans to introduce execution flow analysis for bug hunting, side effect detection, type control,  as well as automated test generation leveraging symbolic execution features, and even a JavaScript virtual machine written in Javascript hosted in the browser for trying out new language features that can’t be transpiled with Babel. </p>\n<p>Check out the prepack.io website and try it on your own code base.</p>\n<p>Code with React and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/323677823&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n\nNews: \n- React Amsterdam 2017\n- Hacker News readers as Progressive Web Apps written in React, Preact, Svelte, Vue, Angular and viperHTML\n- TodoMVC for the RealWorld™ — Exemplary fullstack Medium.com clone powered by React, Angular, Node, Django, and many more\n- Prepack - a tool for making JavaScript code run faster.\n\nLinks:\n- https://twitter.com/ReactAmsterdam\n- https://www.youtube.com/playlist?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M - React Amsterdam 2017 playlist\n- https://youtu.be/3J9EJrvqOiM?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M - Complexity: Divide and Conquer\n- http://divideandconquer.surge.sh/#1\n- https://github.com/tastejs/hacker-news-pwas\n- https://medium.com/@ericsimons/introducing-realworld-6016654d36b5\n- https://github.com/gothinkster/realworld\n- https://prepack.io\n\n',frontmatter:{title:"#7 - Amsterdam, PWA, RealWorld, Prepack",date:"May 20, 2017"}}}}}});
//# sourceMappingURL=path---006-runtyper-a4948a4dd231b0e12157.js.map