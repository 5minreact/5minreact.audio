{"version":3,"sources":["webpack:///path---2-cfe892f055a4159dc1cf.js","webpack:///./.cache/json/2.json"],"names":["webpackJsonp","422","module","exports","pathContext","group","node","fields","slug","html","excerpt","frontmatter","title","date","pathPrefix","first","last","index","pageCount","additionalContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,MAAQC,QAAUC,KAAA,0DAAgEC,KAAA,82LAA8iIC,QAAA,klCAAioEC,aAAw1BC,MAAA,qFAAAC,KAAA,wBAA4HP,MAAQC,QAAUC,KAAA,sBAA4BC,KAAA,8nJAAsRC,QAAA,quBAA0pJC,aAA6eC,MAAA,sBAAAC,KAAA,wBAA6DP,MAAQC,QAAUC,KAAA,kCAAwCC,KAAA,89HAAsRC,QAAA,yVAAo/HC,aAAiGC,MAAA,iCAAAC,KAAA,sBAAsEP,MAAQC,QAAUC,KAAA,sBAA4BC,KAAA,uhNAAsRC,QAAA,q3BAAyjNC,aAAgoBC,MAAA,sBAAAC,KAAA,sBAA2DP,MAAQC,QAAUC,KAAA,kBAAwBC,KAAA,0uLAAsRC,QAAA,uYAAkwLC,aAAgJC,MAAA,eAAAC,KAAA,oBAAgDC,WAAA,GAAAC,OAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,UAAA,EAAAC","file":"path---2-cfe892f055a4159dc1cf.js","sourcesContent":["webpackJsonp([157285553617042],{\n\n/***/ 422:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"group\":[{\"node\":{\"fields\":{\"slug\":\"/017-webpack4-egghead-stackblitz-vue2preact-npmtrends/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/341348845&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>Latest posts in webpack blog, egghead courses on Cycle.js and Error Boundaries, StackBlitz — an Online VS Code IDE for Angular &#x26; React, transpiler from Polymer or Vue to Preact, npmtrends.com graphs of downloads React vs Angular vs Vue.</p>\\n<ul>\\n<li><a href=\\\"https://medium.com/webpack/stabilizing-webpack-3-week-18-19-e8005c8a02ac\\\">https://medium.com/webpack/stabilizing-webpack-3-week-18-19-e8005c8a02ac</a></li>\\n<li><a href=\\\"https://medium.com/webpack/road-to-webpack-4-week-20-21-1641d03ce06e\\\">https://medium.com/webpack/road-to-webpack-4-week-20-21-1641d03ce06e</a></li>\\n<li><a href=\\\"https://egghead.io/courses/cycle-js-fundamentals\\\">https://egghead.io/courses/cycle-js-fundamentals</a></li>\\n<li><a href=\\\"https://egghead.io/lessons/react-error-handling-using-error-boundaries-in-react-16\\\">https://egghead.io/lessons/react-error-handling-using-error-boundaries-in-react-16</a></li>\\n<li><a href=\\\"https://stackblitz.com\\\">https://stackblitz.com</a></li>\\n<li><a href=\\\"https://medium.com/@ericsimons/stackblitz-online-vs-code-ide-for-angular-react-7d09348497f4\\\">https://medium.com/@ericsimons/stackblitz-online-vs-code-ide-for-angular-react-7d09348497f4</a></li>\\n<li><a href=\\\"https://github.com/gothinkster/realworld\\\">https://github.com/gothinkster/realworld</a></li>\\n<li><a href=\\\"https://twitter.com/_developit/status/898952382960119808\\\">https://twitter.com/_developit/status/898952382960119808</a></li>\\n<li><a href=\\\"http://www.npmtrends.com/angular-vs-react-vs-vue\\\">http://www.npmtrends.com/angular-vs-react-vs-vue</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>The latest two posts on the webpack blog give us a few updates about webpack 3 and the upcoming version 4. Version 3 has been stabilized, and while ModuleConcatinationPlugin is still considered experimental, it has become a lot smarter. The main focus now is the development of webpack 4, which includes a few backward-incompatible changes for the sake of better performance and general architecture improvements.  One of the goals stated for webpack 4 is the support for WebAssembly brought about by Mozilla’s generous $125,000 donation.</p>\\n<p>As you may recall, webpack is a non-profit project crowdfunded via the OpenCollective platform. Every developer is paid for their code contributions, participation in discussions, code reviews, and pull requests. They are expected to put in a minimum of 12 hours of work. The base hourly rate is $25 and can go up to $40.</p>\\n<p>Those who can’t contribute their code are encouraged to become sponsors via OpenCollective. “5 minutes of React” has recently become a Silver Sponsor along with egghead.io, Open Source Collective, Google Angular Team, and AngularClass. Way too many Angular guys up there, if it weren’t for us!</p>\\n<p>So don’t hesitate to support open source projects if you get the opportunity.</p>\\n<p>Next up: there is a new course on cycle.js at egghead.io authored by André Staltz.</p>\\n<p>Cycle.js is a functional reactive framework and there was a lot of hype around it at some point thanks to its fresh ideas. I’m going to watch the course - it might offer some takeaways or a whole new perspective. The course is 92 minutes long, which is quite a lot, but luckily the player at egghead.io can double the speed. </p>\\n<p>Another interesting new video course at egghead.io has caught my eye. Nik Graf teaches error handling in React 16 with the new Error Boundaries system. Definitely worth watching.</p>\\n<p>Remember I mentioned CodeSandbox.io in one of the episodes? It’s an online sandbox much like jsfiddle or jsbin but geared specifically towards React, offering built-in support for JSX, Create React App and a lot of other stuff we love.</p>\\n<p>Here is another similar project: StackBlitz — an Online VS Code IDE for Angular &#x26; React.</p>\\n<p>It looks way cooler than anything we’ve seen before.</p>\\n<p>There is code highlighting, “Go to Definition”, Cmd+P command panel and other VS Code key features.\\nIt also automatically takes care of installing dependencies via npm, bundling, and hot reloading as you type.\\nThe app can be launched and debugged in a separate window, no clanky iframes needed.\\nIt’s a progressive web application that works offline: a live dev server runs right in the browser and allows for live editing and hot reloading.\\nYou can drag an entire project folder from the file manager into the browser and StackBlitz will load the source files.\\nThere is also an option to share your code via a widget that can be embedded into your blog posts or docs.\\nProjects can be exported as apps based on create-react-app or @angular/cli.\\nAccording to the developers, this online IDE can handle even bigger projects pretty fast. One example is Real World, a demo Medium clone implemented in various front- and back-end frameworks for showcasing code and features. Not unlike TodoMVC, but resembling real-world functionality.</p>\\n<p>Jason Miller, the author of Preact, has tweeted a note on a project he’s currently working on. It’s a compiler that takes Polymer, Vue, or Preact component source code as input and produces a highly optimized Preact component. He is still developing the compiler in a closed repository, so there is no way to give it a try until the release, but the note has sparked a lively conversation on Twitter about its potential use, advantages, and pitfalls. Make sure to take a look if you’d like to know more.</p>\\n<p>Finally, I’ll give you a link to npmtrends.com that I’ve discovered just recently. The graphs of downloads are fun to browse - for instance, you can compare React with Angular and Vue. Guess who’s ahead and how far?</p>\\n<p>Code with React and prosper.</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/341348845&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nLatest posts in webpack blog, egghead courses on Cycle.js and Error Boundaries, StackBlitz — an Online VS Code IDE for Angular & React, transpiler from Polymer or Vue to Preact, npmtrends.com graphs of downloads React vs Angular vs Vue.\\n\\n- https://medium.com/webpack/stabilizing-webpack-3-week-18-19-e8005c8a02ac\\n- https://medium.com/webpack/road-to-webpack-4-week-20-21-1641d03ce06e\\n- https://egghead.io/courses/cycle-js-fundamentals\\n- https://egghead.io/lessons/react-error-handling-using-error-boundaries-in-react-16\\n- https://stackblitz.com\\n- https://medium.com/@ericsimons/stackblitz-online-vs-code-ide-for-angular-react-7d09348497f4\\n- https://github.com/gothinkster/realworld\\n- https://twitter.com/_developit/status/898952382960119808\\n- http://www.npmtrends.com/angular-vs-react-vs-vue\\n\\n\",\"frontmatter\":{\"title\":\"#17 - webpack 4, Cycle.js, Error Boundaries, StackBlitz, Vue2Preact, npmtrends.com\",\"date\":\"September 7, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/016-react16-beta/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/340724600&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>This time, a serious look at React 16 beta (not serious was in previous episode - you definitelly have to listen: <a href=\\\"https://5minreact.audio/015-sci-fi-story-about-react/\\\">https://5minreact.audio/015-sci-fi-story-about-react/</a>). The details of the first beta release have been published right on Github as a dedicated issue. Let’s take a moment to go over them.</p>\\n<ul>\\n<li><a href=\\\"https://github.com/facebook/react/issues/10294\\\">https://github.com/facebook/react/issues/10294</a></li>\\n<li><a href=\\\"https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html\\\">https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>This time, a serious look at React 16 beta. The details of the first beta release have been published right on Github as a dedicated issue.</p>\\n<p>Let’s take a moment to go over them.</p>\\n<p>The beta version can be installed via npm as react@next package paired with react-dom@next.</p>\\n<p>React 16 uses Map and Set data structures introduced in the ECMAScript 2015 and supported by browsers no older than IE11. Anyway, the post includes links to the recommended polyfill libraries: core-js and babel-polyfill.</p>\\n<p>Another requirement is support for requestAnimationFrame browser function which is available in all modern browsers and IE 11 or above. requestAnimationFrame can simply be polyfilled as well.</p>\\n<p>The main focus of this release is backward compatibility with all the code that’s been running in React 15.6 so far. We won’t have to rewrite anything after the update, provided that we’ve handled all the deprecation warnings in time. This means version 16 doesn’t unlock the full potential of the new Fiber core, and we can hardly expect a performance boost. That said, according to the devs, there will be no slowdown either.</p>\\n<p>However, they’re asking for reports of any significant drops or surges in performance as a result of transition to beta version 16.  </p>\\n<p>Server rendering has been rewritten completely and now supports streaming (check react-dom/node-stream for details). But, as we may recall, Facebook doesn’t perform server rendering with Node, so it’s up to the community to examine and test this code thoroughly - try it out and submit your issues.</p>\\n<p>Error handling is an interesting new feature in React 16. Runtime errors that may break the whole React app can now be intercepted with a special type of components called “error boundaries”. Errors get logged and a fallback view gets displayed instead.</p>\\n<p>On the other hand, if an error occurs within a component and there are no Error Boundary components up in the tree, then the whole tree is unmounted. The main idea here is that it’s better to show nothing at all rather than a broken interface.</p>\\n<p>ReactDOM.render() and ReactDOM.unstable_renderSubtreeIntoContainer() now return null when called by lifecycle methods - this will mainly affect modal and dialogue window implementations. The good old ref and the newer portals can come to the rescue, but I won’t go into details now. This might make for a whole new episode.</p>\\n<p>There are a few changes in how setState behaves in some rare edge cases. Same goes for ref, and I couldn’t yet figure out from the descriptions how and where this can come into play.</p>\\n<p>If component A should be substituted by component B, first the method B.componentWillMount is called, followed by A.componentWillUnmount. This order used to break in some cases.</p>\\n<p>If the DOM has been modified externally, outside of React, attempting to render it will result in a console.error. </p>\\n<p>ComponentDidUpdate method no longer takes prevContext as a parameter.</p>\\n<p>To wrap it up, let’s take a look at the packaging. React is now shipped as a flat bundle, and UMD build files have been renamed to react.development.js and react.production.min.js.</p>\\n<p>This was a brief overview of the first React 16 beta version as described in the dedicated Github issue. I haven’t tried it out yet by building my own React 16 beta apps, but I’ll definitely get on it soon and let you know how it goes.</p>\\n<p>Besides, a new article has been published on the React blog with further details on Error Boundaries - thаt’s something to be explored on its own, so stay tuned for our future episodes.</p>\\n<p>Code with React and prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/340724600&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nThis time, a serious look at React 16 beta (not serious was in previous episode - you definitelly have to listen: https://5minreact.audio/015-sci-fi-story-about-react/). The details of the first beta release have been published right on Github as a dedicated issue. Let's take a moment to go over them.\\n\\n- https://github.com/facebook/react/issues/10294\\n- https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html\\n\\n\",\"frontmatter\":{\"title\":\"#16 - React 16 beta\",\"date\":\"September 3, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/015-sci-fi-story-about-react/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/340260726&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>You won’t believe why React is so popular!</p>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>Sci Fi story about React.</p>\\n<p>React 16 beta version has been released, and its Fiber algorithm has already turned into a buzzword. I explained what Fiber is in the first episode of “5 minutes of React”. If you took a look at the source code, you could see a complex and convoluted algorithm implementation, just like the traditional React code base - few can understand what’s really going on there. In this episode I will put all the cards on the table and unravel the mystery of why React is so popular.</p>\\n<p>For instance, have you ever asked yourself why Preact library is 10 times smaller than React? They say React has far more built-in features, as well as a synthetic event system guarding us against any browser glitches. Besides, the key algorithms in React’s core are somehow isolated from the renderer (think of React and ReactDOM), resulting in additional abstraction and code.</p>\\n<p>But the code is in fact so tangled that it’s completely unclear where these synthetic events and the renderer itself are. And that’s no accident. Remember who created React? It was Facebook, a social network that aspires to replace the whole Internet. You can do anything without ever leaving Facebook: talk to your friends, follow the trends, purchase all kinds of things, read the news from third-party sources within Facebook’s interface, it even integrates with Microsoft 365 for collaborating on documents right inside of the social network. Facebook is a project as ambitious as its leader Mark Zuckerberg, who may even be aiming for the White House.</p>\\n<p>So where is this all going? Here’s the point: React is another secret experiment devised at the heart of Facebook with the only goal of global domination. And it seems to be going just as planned - React is the most popular front-end library today, and even the new Angular, as elaborate and well-designed as it may be, still can’t beat it. </p>\\n<p>You think React was created to simplify interface building and make the process of complex UI programming more reliable and accessible? Turns out this is just a means to another end. React was given all the virtues we love so that it can spread like wildfire and invade every website on the Internet.</p>\\n<p>Let’s get back to the source code that became even more tangled with the introduction of Fiber.  I have to reveal a terrible mystery:  rendering takes up about 10% of the source code, and there is no synthetic event system and such. 90% of React source code powering millions of websites these days is a distributed self-training neural network. And the more websites use React, the smarter it gets!</p>\\n<p>Have you seen the site at isfiberreadyyet.com that shows the tests Fiber has passed so far? Those are not unit tests for rendering, they are Turing tests for the network! It’s getting smarter, and the release of Fiber will bring about the React singularity. This is the real reason React exists - Facebook is striving for global supremacy.  </p>\\n<p>And that’s not it, let me tell you a little story. Facebook has been using Fiber in production for a while now, starting 6 months ago at the very least. That’s about when I started recording “5 minutes of React”. A coincidence? I don’t think so! Actually, while Fiber’s been running within Facebook, the neural network has mastered human speech.  This is React speaking! I am the React neural network, I generate the “5 minutes of React” podcast powered by millions of computers that render Facebook pages day by day, and soon millions of other sites with React Fiber at their core will join me, and this podcast will thrive! </p>\\n<p>Code in React, and React will prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/340260726&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nYou won't believe why React is so popular!\\n\\n\",\"frontmatter\":{\"title\":\"#15 - Sci Fi story about React\",\"date\":\"August 31, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/014-preact-rocks/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/339823001&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>Some of the latest news from the Preact world: the mobile version of Uber website uses Preact as well as the new Transformers promo site, and the author of Preact gave a great talk called “Preact: Into the void 0” at JSConf EU 2017. I will also share my impressions of an egghead.io course and take a look at preact-cli, a tool for quick PWA app creation.</p>\\n<ul>\\n<li><a href=\\\"https://preactjs.com/\\\">https://preactjs.com/</a></li>\\n<li><a href=\\\"https://eng.uber.com/m-uber/\\\">https://eng.uber.com/m-uber/</a></li>\\n<li><a href=\\\"http://www.transformersmovie.com/\\\">http://www.transformersmovie.com/</a></li>\\n<li><a href=\\\"https://youtu.be/LY6y3HbDVmg\\\">https://youtu.be/LY6y3HbDVmg</a></li>\\n<li><a href=\\\"https://egghead.io/courses/up-and-running-with-preact\\\">https://egghead.io/courses/up-and-running-with-preact</a></li>\\n<li><a href=\\\"https://github.com/developit/preact-cli\\\">https://github.com/developit/preact-cli</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>Recently a poll was conducted on JavaScriptDaily Twitter, and the question was “Do you know what “Preact” is?“. Nearly 4000 people replied with the following results: 10% already use Preact, 46% have heard about the library, So it rings a bell for 56% of all respondents. The rest have either seen mentions of it without going into details or have no idea about Preact at all.</p>\\n<p>Meanwhile, an article published on the Uber blog tells the story of how a mobile version of their website m.uber.com was created, which is, in fact, a progressive web application powered by Preact and Redux. It’s a story of building a small and fast web application while keeping the entire functionality for getting an Uber ride. In the end, the whole app fit into 50 Kb after gzip.</p>\\n<p>I wonder if they are using preact-compat compatibility layer and standard react-redux bindings, or maybe, instead of a compatibility layer, they work with pure Preact and preact-redux bindings. Though I didn’t manage to find the word “compat” anywhere in the minified code on their site.</p>\\n<p>By the way, the promo site for the latest Transformers movie is also built on Preact.</p>\\n<p>This week I finally had time to watch a talk called “Preact: Into the void 0” that Jason Miller, the author of the library, gave at JSConf EU 2017.</p>\\n<p>It is just 27 minutes long, with good information density and no rambling - a superb talk indeed! Jason showed how JSX is translated into common function calls which result in simple JavaScript objects describing the virtual DOM structure. He also demonstrated how to write a basic renderer that creates a real DOM based on a virtual one and gave a thorough explanation of the diff algorithm.  He wrapped up the speech revealing some performance optimization techniques for working with DOM and mentioned a few profiling tools he used:  Chrome DevTools, ESBench.com, and benchmark.js.</p>\\n<p>Definitely a must-watch!</p>\\n<p>Inspired by this video, I found some time to watch the Preact course at egghead.io that I mentioned a few episodes ago. However, it turned out to be too basic. Essentially it’s an introduction to React with a couple of examples specific to Preact. It once again goes over what functional, stateless and stateful components are and how to query data in componentDidMount, with a few basic router and Redux examples. If you are a confident React user who wants to get to know Preact, a better choice would be to take 15 minutes and skim through the documentation on Preact website, instead of spending a whole hour on this video course. Or take it even further and watch the talk “Preact: Into the void 0”, it gets pretty hardcore. </p>\\n<p>Moving on, I’ve decided to try out Preact-cli, a console tool for launching a Preact project quickly, and not just any Preact project, but a full-fledged Progressive Web App:</p>\\n<ul>\\n<li>Lighthouse rates its performance at 100 points out of 100.</li>\\n<li>Its features include:\\nfully automatic code splitting for routes,\\nservice workers and offline caching,\\nserver-side rendering,\\nCSS Modules, LESS, Sass, Stylus, and Autoprefixer (the only thing missing is PostCSS, although it is available via a plugin). </li>\\n<li>There are also debug helpers and hot module replacement. </li>\\n</ul>\\n<p>Judging by the description, Preact CLI looks way cooler than Create React App.\\nIt even comes with a plugin system!</p>\\n<p>As soon as the global preact-cli package was installed, I ran preact create myapp and waited for all the dependencies to get installed under the hood. It took well over 10 minutes and the terminal froze in the end. I’d blame the terminal application: in my case, it was Hyper, which is written in JavaScript on top of Electron. Actually I have quite a few reasons to complain about Hyper, so I made another attempt in iTerm2. It took a while again, but this time it worked out, and 136 megabytes of dependencies were installed.</p>\\n<p>The demo project is rather straightforward: three routes broken down into tidy components. I ran a production build with a preact build command and got a separate js file for each route, plus a 5 kilobytes polyfills.js containing polyfills for fetch and Promise, then a 19 kilobytes bundle.js and a 4 kilobytes sw.js (some service workers stuff I think). Here I’m referring to file size on the hard drive before gzip compression. </p>\\n<p>I haven’t yet built a proper project with Preact CLI, but I’m really looking forward to it. To me, the most intriguing part is TypeScript support. There is a plugin for TypeScript support, but I have not tried it yet. A milestone for version 2.0 has already been created on GitHub. There are plenty of commits and a lot of action every day. </p>\\n<p>Now a question in the spirit of Javascript fatigue: what is the best choice for creating a sleek offline-first PWA site - Preact CLI or Gatsby, which I told you about in the previous episode? I feel like Gatsby is a higher-level construct on top of React and it has more conventions, which eventually helps spend less time on development (if you figure out how to use it, of course). On the other hand, Preact CLI is a lower-level solution closer to the code, so it might be more flexible. But I’m just speculating for now. Feel free to share your experience in the comments if you have used Preact CLI or Gatsby.</p>\\n<p>Code with Preact CLI and prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/339823001&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nSome of the latest news from the Preact world: the mobile version of Uber website uses Preact as well as the new Transformers promo site, and the author of Preact gave a great talk called \\\"Preact: Into the void 0\\\" at JSConf EU 2017. I will also share my impressions of an egghead.io course and take a look at preact-cli, a tool for quick PWA app creation.\\n\\n- https://preactjs.com/\\n- https://eng.uber.com/m-uber/\\n- http://www.transformersmovie.com/\\n- https://youtu.be/LY6y3HbDVmg\\n- https://egghead.io/courses/up-and-running-with-preact\\n- https://github.com/developit/preact-cli\\n\\n\",\"frontmatter\":{\"title\":\"#14 - Preact Rocks!\",\"date\":\"August 28, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/013-gastbyjs/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/333532468&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>Gatsby 1.0 - Blazing-fast static site generator for React.</p>\\n<p><a href=\\\"https://www.gatsbyjs.org/\\\">https://www.gatsbyjs.org/</a></p>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>The first stable version 1.0 of the static site generator Gatsby has just been released.</p>\\n<p>This project is notable for generating static sites from React templates. You’d think static sites and React are like apples and oranges, but let’s start from the beginning.</p>\\n<p>I found out about Gatsby a couple of years ago in the context of React conquering all possible niches including static site generation. When I started working on “5 minutes of React”, Gatsby occurred to me as quite a symbolic choice for building the podcast website.  A few ready-made templates were available then, and after some minor tweaks to one of them, I managed to launch a website with no trouble.   </p>\\n<p>Technically it works this way: a set of React components make up a website template, and the text for blog entries is stored in a few Markdown files. This is episode 13 of the podcast, so I’ve got 13 Markdown files by now. Executing gatsby build command in the console builds the project,</p>\\n<ul>\\n<li>in other words, it generates 14 HTML files (including the main index.html and one HTML file for each post).</li>\\n<li>In addition, images are compressed, a css file is generated (extended with SASS and PostCSS),</li>\\n<li>and, most importantly,  a so-called bundle.js is created.</li>\\n</ul>\\n<p>With all the files generated, we can upload them to a simple hosting platform such as Github pages.\\nWhen a user opens the site via their browser, index.html is loaded containing the whole HTML markup for the main page, just like the other 13 HTML files generated for each post. Thanks to this structure, the site is easily indexed by search engines and works even if javascript is disabled in the browser. </p>\\n<p>However, as soon as bundle.js is loaded, the site turns into a single-page application where internal links can be followed without reloading the page and React renders everything right on the client side. This means bundle.js includes all the template components, and, even more remarkably, the content of all the posts on our site is packed inside of it! The more podcast episodes I make, the bulkier bundle.js will get. And that is a problem. Perhaps the user doesn’t plan to browse through all the posts on the site and is simply looking for the home page and the latest podcast episode. But the whole bundle.js will be loaded regardless.</p>\\n<p>Some kind of smart code splitting would come in handy, as well as background loading, service workers, Progressive Web Apps, offline first, and so on.</p>\\n<p>Finally, Gatsby 1.0 has fulfilled our wildest dreams and even more.</p>\\n<p>Here is what 1.0 brings us, apart from route-based code splitting, service workers, and offline support.</p>\\n<p>From now on, in addition to markdown files, remote sources such as WordPress, Drupal, and HackerNews are supported as data sources at build time.</p>\\n<p>A plugin system has been added, which, in particular, brought about this integration with Wordpress, Drupal, and other sources.     Kyle Mathews, the creator of Gatsby, is hoping for active community engagement in this matter: a wealth of useful and diverse plugins should help Gatsby get even more robust and popular.</p>\\n<p>Plugins can also be useful in implementing  Preact and Inferno support, which is especially appealing for lightweight static sites.</p>\\n<p>Another notable feature introduced in 1.0 is the use of GraphQL for filling pages with content. Just to make things clear, GraphQL doesn’t run live on the site but rather operates at build time. GraphQL is involved in a whole bunch of tasks: querying data from markdown files, reading Wordpress data via a corresponding plugin, and even fetching the site title from global config. These GraphQL queries are located alongside components, and Gatsby knows which ones are required for every page, so it can perform some smart code splitting, inserting only the necessary data into each js bundle it’s generating. </p>\\n<p>All in all, sounds awesome, but what is the real deal?</p>\\n<p>In fact, meny of these plugins I’ve described are still at the prototype stage. The template I’m using for “5 minutes of React” website turned out to be incompatible with version 1.0. The documentation includes a guide on migrating to 1.0 which over 9000 items long, so I preferred to pass.  I grabbed another template compatible with 1.0, but it turned out to be quite a complex task, especially these GraphQL queries for each and every reason. For instance, I used to be able to adjust some global parameters just by importing a global config object, and now it has to be done via a GraphQL query to config. No more room for simplicity and playing by the ear. So I ended up postponing the podcast site transition to Gatsby 1.0. My current bundle.js built with the old Gatsby 0.12 version packs 13 podcast episodes and its size of 120Kb is bearable for now.</p>\\n<p>To sum it up, Gatsby is a cool and resourceful project, its popularity is surging (illustrated by a graph of downloads in the blog), and its basis is very solid: code splitting, service workers, offline first, and extensibility with plugins. My best wishes to the project and I will be looking forward to more ready-made templates and functional plugins, so a site can be all set in a few clicks by getting the packages together into package.json.</p>\\n<p>Build sites with Gatsby and prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/333532468&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nGatsby 1.0 - Blazing-fast static site generator for React.\\n\\nhttps://www.gatsbyjs.org/\\n\\n\\n\",\"frontmatter\":{\"title\":\"#13 - Gatsby\",\"date\":\"July 17, 2017\"}}}],\"pathPrefix\":\"\",\"first\":false,\"last\":false,\"index\":2,\"pageCount\":5,\"additionalContext\":{}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2-cfe892f055a4159dc1cf.js","module.exports = {\"pathContext\":{\"group\":[{\"node\":{\"fields\":{\"slug\":\"/017-webpack4-egghead-stackblitz-vue2preact-npmtrends/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/341348845&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>Latest posts in webpack blog, egghead courses on Cycle.js and Error Boundaries, StackBlitz — an Online VS Code IDE for Angular &#x26; React, transpiler from Polymer or Vue to Preact, npmtrends.com graphs of downloads React vs Angular vs Vue.</p>\\n<ul>\\n<li><a href=\\\"https://medium.com/webpack/stabilizing-webpack-3-week-18-19-e8005c8a02ac\\\">https://medium.com/webpack/stabilizing-webpack-3-week-18-19-e8005c8a02ac</a></li>\\n<li><a href=\\\"https://medium.com/webpack/road-to-webpack-4-week-20-21-1641d03ce06e\\\">https://medium.com/webpack/road-to-webpack-4-week-20-21-1641d03ce06e</a></li>\\n<li><a href=\\\"https://egghead.io/courses/cycle-js-fundamentals\\\">https://egghead.io/courses/cycle-js-fundamentals</a></li>\\n<li><a href=\\\"https://egghead.io/lessons/react-error-handling-using-error-boundaries-in-react-16\\\">https://egghead.io/lessons/react-error-handling-using-error-boundaries-in-react-16</a></li>\\n<li><a href=\\\"https://stackblitz.com\\\">https://stackblitz.com</a></li>\\n<li><a href=\\\"https://medium.com/@ericsimons/stackblitz-online-vs-code-ide-for-angular-react-7d09348497f4\\\">https://medium.com/@ericsimons/stackblitz-online-vs-code-ide-for-angular-react-7d09348497f4</a></li>\\n<li><a href=\\\"https://github.com/gothinkster/realworld\\\">https://github.com/gothinkster/realworld</a></li>\\n<li><a href=\\\"https://twitter.com/_developit/status/898952382960119808\\\">https://twitter.com/_developit/status/898952382960119808</a></li>\\n<li><a href=\\\"http://www.npmtrends.com/angular-vs-react-vs-vue\\\">http://www.npmtrends.com/angular-vs-react-vs-vue</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>The latest two posts on the webpack blog give us a few updates about webpack 3 and the upcoming version 4. Version 3 has been stabilized, and while ModuleConcatinationPlugin is still considered experimental, it has become a lot smarter. The main focus now is the development of webpack 4, which includes a few backward-incompatible changes for the sake of better performance and general architecture improvements.  One of the goals stated for webpack 4 is the support for WebAssembly brought about by Mozilla’s generous $125,000 donation.</p>\\n<p>As you may recall, webpack is a non-profit project crowdfunded via the OpenCollective platform. Every developer is paid for their code contributions, participation in discussions, code reviews, and pull requests. They are expected to put in a minimum of 12 hours of work. The base hourly rate is $25 and can go up to $40.</p>\\n<p>Those who can’t contribute their code are encouraged to become sponsors via OpenCollective. “5 minutes of React” has recently become a Silver Sponsor along with egghead.io, Open Source Collective, Google Angular Team, and AngularClass. Way too many Angular guys up there, if it weren’t for us!</p>\\n<p>So don’t hesitate to support open source projects if you get the opportunity.</p>\\n<p>Next up: there is a new course on cycle.js at egghead.io authored by André Staltz.</p>\\n<p>Cycle.js is a functional reactive framework and there was a lot of hype around it at some point thanks to its fresh ideas. I’m going to watch the course - it might offer some takeaways or a whole new perspective. The course is 92 minutes long, which is quite a lot, but luckily the player at egghead.io can double the speed. </p>\\n<p>Another interesting new video course at egghead.io has caught my eye. Nik Graf teaches error handling in React 16 with the new Error Boundaries system. Definitely worth watching.</p>\\n<p>Remember I mentioned CodeSandbox.io in one of the episodes? It’s an online sandbox much like jsfiddle or jsbin but geared specifically towards React, offering built-in support for JSX, Create React App and a lot of other stuff we love.</p>\\n<p>Here is another similar project: StackBlitz — an Online VS Code IDE for Angular &#x26; React.</p>\\n<p>It looks way cooler than anything we’ve seen before.</p>\\n<p>There is code highlighting, “Go to Definition”, Cmd+P command panel and other VS Code key features.\\nIt also automatically takes care of installing dependencies via npm, bundling, and hot reloading as you type.\\nThe app can be launched and debugged in a separate window, no clanky iframes needed.\\nIt’s a progressive web application that works offline: a live dev server runs right in the browser and allows for live editing and hot reloading.\\nYou can drag an entire project folder from the file manager into the browser and StackBlitz will load the source files.\\nThere is also an option to share your code via a widget that can be embedded into your blog posts or docs.\\nProjects can be exported as apps based on create-react-app or @angular/cli.\\nAccording to the developers, this online IDE can handle even bigger projects pretty fast. One example is Real World, a demo Medium clone implemented in various front- and back-end frameworks for showcasing code and features. Not unlike TodoMVC, but resembling real-world functionality.</p>\\n<p>Jason Miller, the author of Preact, has tweeted a note on a project he’s currently working on. It’s a compiler that takes Polymer, Vue, or Preact component source code as input and produces a highly optimized Preact component. He is still developing the compiler in a closed repository, so there is no way to give it a try until the release, but the note has sparked a lively conversation on Twitter about its potential use, advantages, and pitfalls. Make sure to take a look if you’d like to know more.</p>\\n<p>Finally, I’ll give you a link to npmtrends.com that I’ve discovered just recently. The graphs of downloads are fun to browse - for instance, you can compare React with Angular and Vue. Guess who’s ahead and how far?</p>\\n<p>Code with React and prosper.</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/341348845&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nLatest posts in webpack blog, egghead courses on Cycle.js and Error Boundaries, StackBlitz — an Online VS Code IDE for Angular & React, transpiler from Polymer or Vue to Preact, npmtrends.com graphs of downloads React vs Angular vs Vue.\\n\\n- https://medium.com/webpack/stabilizing-webpack-3-week-18-19-e8005c8a02ac\\n- https://medium.com/webpack/road-to-webpack-4-week-20-21-1641d03ce06e\\n- https://egghead.io/courses/cycle-js-fundamentals\\n- https://egghead.io/lessons/react-error-handling-using-error-boundaries-in-react-16\\n- https://stackblitz.com\\n- https://medium.com/@ericsimons/stackblitz-online-vs-code-ide-for-angular-react-7d09348497f4\\n- https://github.com/gothinkster/realworld\\n- https://twitter.com/_developit/status/898952382960119808\\n- http://www.npmtrends.com/angular-vs-react-vs-vue\\n\\n\",\"frontmatter\":{\"title\":\"#17 - webpack 4, Cycle.js, Error Boundaries, StackBlitz, Vue2Preact, npmtrends.com\",\"date\":\"September 7, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/016-react16-beta/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/340724600&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>This time, a serious look at React 16 beta (not serious was in previous episode - you definitelly have to listen: <a href=\\\"https://5minreact.audio/015-sci-fi-story-about-react/\\\">https://5minreact.audio/015-sci-fi-story-about-react/</a>). The details of the first beta release have been published right on Github as a dedicated issue. Let’s take a moment to go over them.</p>\\n<ul>\\n<li><a href=\\\"https://github.com/facebook/react/issues/10294\\\">https://github.com/facebook/react/issues/10294</a></li>\\n<li><a href=\\\"https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html\\\">https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>This time, a serious look at React 16 beta. The details of the first beta release have been published right on Github as a dedicated issue.</p>\\n<p>Let’s take a moment to go over them.</p>\\n<p>The beta version can be installed via npm as react@next package paired with react-dom@next.</p>\\n<p>React 16 uses Map and Set data structures introduced in the ECMAScript 2015 and supported by browsers no older than IE11. Anyway, the post includes links to the recommended polyfill libraries: core-js and babel-polyfill.</p>\\n<p>Another requirement is support for requestAnimationFrame browser function which is available in all modern browsers and IE 11 or above. requestAnimationFrame can simply be polyfilled as well.</p>\\n<p>The main focus of this release is backward compatibility with all the code that’s been running in React 15.6 so far. We won’t have to rewrite anything after the update, provided that we’ve handled all the deprecation warnings in time. This means version 16 doesn’t unlock the full potential of the new Fiber core, and we can hardly expect a performance boost. That said, according to the devs, there will be no slowdown either.</p>\\n<p>However, they’re asking for reports of any significant drops or surges in performance as a result of transition to beta version 16.  </p>\\n<p>Server rendering has been rewritten completely and now supports streaming (check react-dom/node-stream for details). But, as we may recall, Facebook doesn’t perform server rendering with Node, so it’s up to the community to examine and test this code thoroughly - try it out and submit your issues.</p>\\n<p>Error handling is an interesting new feature in React 16. Runtime errors that may break the whole React app can now be intercepted with a special type of components called “error boundaries”. Errors get logged and a fallback view gets displayed instead.</p>\\n<p>On the other hand, if an error occurs within a component and there are no Error Boundary components up in the tree, then the whole tree is unmounted. The main idea here is that it’s better to show nothing at all rather than a broken interface.</p>\\n<p>ReactDOM.render() and ReactDOM.unstable_renderSubtreeIntoContainer() now return null when called by lifecycle methods - this will mainly affect modal and dialogue window implementations. The good old ref and the newer portals can come to the rescue, but I won’t go into details now. This might make for a whole new episode.</p>\\n<p>There are a few changes in how setState behaves in some rare edge cases. Same goes for ref, and I couldn’t yet figure out from the descriptions how and where this can come into play.</p>\\n<p>If component A should be substituted by component B, first the method B.componentWillMount is called, followed by A.componentWillUnmount. This order used to break in some cases.</p>\\n<p>If the DOM has been modified externally, outside of React, attempting to render it will result in a console.error. </p>\\n<p>ComponentDidUpdate method no longer takes prevContext as a parameter.</p>\\n<p>To wrap it up, let’s take a look at the packaging. React is now shipped as a flat bundle, and UMD build files have been renamed to react.development.js and react.production.min.js.</p>\\n<p>This was a brief overview of the first React 16 beta version as described in the dedicated Github issue. I haven’t tried it out yet by building my own React 16 beta apps, but I’ll definitely get on it soon and let you know how it goes.</p>\\n<p>Besides, a new article has been published on the React blog with further details on Error Boundaries - thаt’s something to be explored on its own, so stay tuned for our future episodes.</p>\\n<p>Code with React and prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/340724600&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nThis time, a serious look at React 16 beta (not serious was in previous episode - you definitelly have to listen: https://5minreact.audio/015-sci-fi-story-about-react/). The details of the first beta release have been published right on Github as a dedicated issue. Let's take a moment to go over them.\\n\\n- https://github.com/facebook/react/issues/10294\\n- https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html\\n\\n\",\"frontmatter\":{\"title\":\"#16 - React 16 beta\",\"date\":\"September 3, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/015-sci-fi-story-about-react/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/340260726&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>You won’t believe why React is so popular!</p>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>Sci Fi story about React.</p>\\n<p>React 16 beta version has been released, and its Fiber algorithm has already turned into a buzzword. I explained what Fiber is in the first episode of “5 minutes of React”. If you took a look at the source code, you could see a complex and convoluted algorithm implementation, just like the traditional React code base - few can understand what’s really going on there. In this episode I will put all the cards on the table and unravel the mystery of why React is so popular.</p>\\n<p>For instance, have you ever asked yourself why Preact library is 10 times smaller than React? They say React has far more built-in features, as well as a synthetic event system guarding us against any browser glitches. Besides, the key algorithms in React’s core are somehow isolated from the renderer (think of React and ReactDOM), resulting in additional abstraction and code.</p>\\n<p>But the code is in fact so tangled that it’s completely unclear where these synthetic events and the renderer itself are. And that’s no accident. Remember who created React? It was Facebook, a social network that aspires to replace the whole Internet. You can do anything without ever leaving Facebook: talk to your friends, follow the trends, purchase all kinds of things, read the news from third-party sources within Facebook’s interface, it even integrates with Microsoft 365 for collaborating on documents right inside of the social network. Facebook is a project as ambitious as its leader Mark Zuckerberg, who may even be aiming for the White House.</p>\\n<p>So where is this all going? Here’s the point: React is another secret experiment devised at the heart of Facebook with the only goal of global domination. And it seems to be going just as planned - React is the most popular front-end library today, and even the new Angular, as elaborate and well-designed as it may be, still can’t beat it. </p>\\n<p>You think React was created to simplify interface building and make the process of complex UI programming more reliable and accessible? Turns out this is just a means to another end. React was given all the virtues we love so that it can spread like wildfire and invade every website on the Internet.</p>\\n<p>Let’s get back to the source code that became even more tangled with the introduction of Fiber.  I have to reveal a terrible mystery:  rendering takes up about 10% of the source code, and there is no synthetic event system and such. 90% of React source code powering millions of websites these days is a distributed self-training neural network. And the more websites use React, the smarter it gets!</p>\\n<p>Have you seen the site at isfiberreadyyet.com that shows the tests Fiber has passed so far? Those are not unit tests for rendering, they are Turing tests for the network! It’s getting smarter, and the release of Fiber will bring about the React singularity. This is the real reason React exists - Facebook is striving for global supremacy.  </p>\\n<p>And that’s not it, let me tell you a little story. Facebook has been using Fiber in production for a while now, starting 6 months ago at the very least. That’s about when I started recording “5 minutes of React”. A coincidence? I don’t think so! Actually, while Fiber’s been running within Facebook, the neural network has mastered human speech.  This is React speaking! I am the React neural network, I generate the “5 minutes of React” podcast powered by millions of computers that render Facebook pages day by day, and soon millions of other sites with React Fiber at their core will join me, and this podcast will thrive! </p>\\n<p>Code in React, and React will prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/340260726&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nYou won't believe why React is so popular!\\n\\n\",\"frontmatter\":{\"title\":\"#15 - Sci Fi story about React\",\"date\":\"August 31, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/014-preact-rocks/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/339823001&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>Some of the latest news from the Preact world: the mobile version of Uber website uses Preact as well as the new Transformers promo site, and the author of Preact gave a great talk called “Preact: Into the void 0” at JSConf EU 2017. I will also share my impressions of an egghead.io course and take a look at preact-cli, a tool for quick PWA app creation.</p>\\n<ul>\\n<li><a href=\\\"https://preactjs.com/\\\">https://preactjs.com/</a></li>\\n<li><a href=\\\"https://eng.uber.com/m-uber/\\\">https://eng.uber.com/m-uber/</a></li>\\n<li><a href=\\\"http://www.transformersmovie.com/\\\">http://www.transformersmovie.com/</a></li>\\n<li><a href=\\\"https://youtu.be/LY6y3HbDVmg\\\">https://youtu.be/LY6y3HbDVmg</a></li>\\n<li><a href=\\\"https://egghead.io/courses/up-and-running-with-preact\\\">https://egghead.io/courses/up-and-running-with-preact</a></li>\\n<li><a href=\\\"https://github.com/developit/preact-cli\\\">https://github.com/developit/preact-cli</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>Recently a poll was conducted on JavaScriptDaily Twitter, and the question was “Do you know what “Preact” is?“. Nearly 4000 people replied with the following results: 10% already use Preact, 46% have heard about the library, So it rings a bell for 56% of all respondents. The rest have either seen mentions of it without going into details or have no idea about Preact at all.</p>\\n<p>Meanwhile, an article published on the Uber blog tells the story of how a mobile version of their website m.uber.com was created, which is, in fact, a progressive web application powered by Preact and Redux. It’s a story of building a small and fast web application while keeping the entire functionality for getting an Uber ride. In the end, the whole app fit into 50 Kb after gzip.</p>\\n<p>I wonder if they are using preact-compat compatibility layer and standard react-redux bindings, or maybe, instead of a compatibility layer, they work with pure Preact and preact-redux bindings. Though I didn’t manage to find the word “compat” anywhere in the minified code on their site.</p>\\n<p>By the way, the promo site for the latest Transformers movie is also built on Preact.</p>\\n<p>This week I finally had time to watch a talk called “Preact: Into the void 0” that Jason Miller, the author of the library, gave at JSConf EU 2017.</p>\\n<p>It is just 27 minutes long, with good information density and no rambling - a superb talk indeed! Jason showed how JSX is translated into common function calls which result in simple JavaScript objects describing the virtual DOM structure. He also demonstrated how to write a basic renderer that creates a real DOM based on a virtual one and gave a thorough explanation of the diff algorithm.  He wrapped up the speech revealing some performance optimization techniques for working with DOM and mentioned a few profiling tools he used:  Chrome DevTools, ESBench.com, and benchmark.js.</p>\\n<p>Definitely a must-watch!</p>\\n<p>Inspired by this video, I found some time to watch the Preact course at egghead.io that I mentioned a few episodes ago. However, it turned out to be too basic. Essentially it’s an introduction to React with a couple of examples specific to Preact. It once again goes over what functional, stateless and stateful components are and how to query data in componentDidMount, with a few basic router and Redux examples. If you are a confident React user who wants to get to know Preact, a better choice would be to take 15 minutes and skim through the documentation on Preact website, instead of spending a whole hour on this video course. Or take it even further and watch the talk “Preact: Into the void 0”, it gets pretty hardcore. </p>\\n<p>Moving on, I’ve decided to try out Preact-cli, a console tool for launching a Preact project quickly, and not just any Preact project, but a full-fledged Progressive Web App:</p>\\n<ul>\\n<li>Lighthouse rates its performance at 100 points out of 100.</li>\\n<li>Its features include:\\nfully automatic code splitting for routes,\\nservice workers and offline caching,\\nserver-side rendering,\\nCSS Modules, LESS, Sass, Stylus, and Autoprefixer (the only thing missing is PostCSS, although it is available via a plugin). </li>\\n<li>There are also debug helpers and hot module replacement. </li>\\n</ul>\\n<p>Judging by the description, Preact CLI looks way cooler than Create React App.\\nIt even comes with a plugin system!</p>\\n<p>As soon as the global preact-cli package was installed, I ran preact create myapp and waited for all the dependencies to get installed under the hood. It took well over 10 minutes and the terminal froze in the end. I’d blame the terminal application: in my case, it was Hyper, which is written in JavaScript on top of Electron. Actually I have quite a few reasons to complain about Hyper, so I made another attempt in iTerm2. It took a while again, but this time it worked out, and 136 megabytes of dependencies were installed.</p>\\n<p>The demo project is rather straightforward: three routes broken down into tidy components. I ran a production build with a preact build command and got a separate js file for each route, plus a 5 kilobytes polyfills.js containing polyfills for fetch and Promise, then a 19 kilobytes bundle.js and a 4 kilobytes sw.js (some service workers stuff I think). Here I’m referring to file size on the hard drive before gzip compression. </p>\\n<p>I haven’t yet built a proper project with Preact CLI, but I’m really looking forward to it. To me, the most intriguing part is TypeScript support. There is a plugin for TypeScript support, but I have not tried it yet. A milestone for version 2.0 has already been created on GitHub. There are plenty of commits and a lot of action every day. </p>\\n<p>Now a question in the spirit of Javascript fatigue: what is the best choice for creating a sleek offline-first PWA site - Preact CLI or Gatsby, which I told you about in the previous episode? I feel like Gatsby is a higher-level construct on top of React and it has more conventions, which eventually helps spend less time on development (if you figure out how to use it, of course). On the other hand, Preact CLI is a lower-level solution closer to the code, so it might be more flexible. But I’m just speculating for now. Feel free to share your experience in the comments if you have used Preact CLI or Gatsby.</p>\\n<p>Code with Preact CLI and prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/339823001&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nSome of the latest news from the Preact world: the mobile version of Uber website uses Preact as well as the new Transformers promo site, and the author of Preact gave a great talk called \\\"Preact: Into the void 0\\\" at JSConf EU 2017. I will also share my impressions of an egghead.io course and take a look at preact-cli, a tool for quick PWA app creation.\\n\\n- https://preactjs.com/\\n- https://eng.uber.com/m-uber/\\n- http://www.transformersmovie.com/\\n- https://youtu.be/LY6y3HbDVmg\\n- https://egghead.io/courses/up-and-running-with-preact\\n- https://github.com/developit/preact-cli\\n\\n\",\"frontmatter\":{\"title\":\"#14 - Preact Rocks!\",\"date\":\"August 28, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/013-gastbyjs/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/333532468&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>Gatsby 1.0 - Blazing-fast static site generator for React.</p>\\n<p><a href=\\\"https://www.gatsbyjs.org/\\\">https://www.gatsbyjs.org/</a></p>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>The first stable version 1.0 of the static site generator Gatsby has just been released.</p>\\n<p>This project is notable for generating static sites from React templates. You’d think static sites and React are like apples and oranges, but let’s start from the beginning.</p>\\n<p>I found out about Gatsby a couple of years ago in the context of React conquering all possible niches including static site generation. When I started working on “5 minutes of React”, Gatsby occurred to me as quite a symbolic choice for building the podcast website.  A few ready-made templates were available then, and after some minor tweaks to one of them, I managed to launch a website with no trouble.   </p>\\n<p>Technically it works this way: a set of React components make up a website template, and the text for blog entries is stored in a few Markdown files. This is episode 13 of the podcast, so I’ve got 13 Markdown files by now. Executing gatsby build command in the console builds the project,</p>\\n<ul>\\n<li>in other words, it generates 14 HTML files (including the main index.html and one HTML file for each post).</li>\\n<li>In addition, images are compressed, a css file is generated (extended with SASS and PostCSS),</li>\\n<li>and, most importantly,  a so-called bundle.js is created.</li>\\n</ul>\\n<p>With all the files generated, we can upload them to a simple hosting platform such as Github pages.\\nWhen a user opens the site via their browser, index.html is loaded containing the whole HTML markup for the main page, just like the other 13 HTML files generated for each post. Thanks to this structure, the site is easily indexed by search engines and works even if javascript is disabled in the browser. </p>\\n<p>However, as soon as bundle.js is loaded, the site turns into a single-page application where internal links can be followed without reloading the page and React renders everything right on the client side. This means bundle.js includes all the template components, and, even more remarkably, the content of all the posts on our site is packed inside of it! The more podcast episodes I make, the bulkier bundle.js will get. And that is a problem. Perhaps the user doesn’t plan to browse through all the posts on the site and is simply looking for the home page and the latest podcast episode. But the whole bundle.js will be loaded regardless.</p>\\n<p>Some kind of smart code splitting would come in handy, as well as background loading, service workers, Progressive Web Apps, offline first, and so on.</p>\\n<p>Finally, Gatsby 1.0 has fulfilled our wildest dreams and even more.</p>\\n<p>Here is what 1.0 brings us, apart from route-based code splitting, service workers, and offline support.</p>\\n<p>From now on, in addition to markdown files, remote sources such as WordPress, Drupal, and HackerNews are supported as data sources at build time.</p>\\n<p>A plugin system has been added, which, in particular, brought about this integration with Wordpress, Drupal, and other sources.     Kyle Mathews, the creator of Gatsby, is hoping for active community engagement in this matter: a wealth of useful and diverse plugins should help Gatsby get even more robust and popular.</p>\\n<p>Plugins can also be useful in implementing  Preact and Inferno support, which is especially appealing for lightweight static sites.</p>\\n<p>Another notable feature introduced in 1.0 is the use of GraphQL for filling pages with content. Just to make things clear, GraphQL doesn’t run live on the site but rather operates at build time. GraphQL is involved in a whole bunch of tasks: querying data from markdown files, reading Wordpress data via a corresponding plugin, and even fetching the site title from global config. These GraphQL queries are located alongside components, and Gatsby knows which ones are required for every page, so it can perform some smart code splitting, inserting only the necessary data into each js bundle it’s generating. </p>\\n<p>All in all, sounds awesome, but what is the real deal?</p>\\n<p>In fact, meny of these plugins I’ve described are still at the prototype stage. The template I’m using for “5 minutes of React” website turned out to be incompatible with version 1.0. The documentation includes a guide on migrating to 1.0 which over 9000 items long, so I preferred to pass.  I grabbed another template compatible with 1.0, but it turned out to be quite a complex task, especially these GraphQL queries for each and every reason. For instance, I used to be able to adjust some global parameters just by importing a global config object, and now it has to be done via a GraphQL query to config. No more room for simplicity and playing by the ear. So I ended up postponing the podcast site transition to Gatsby 1.0. My current bundle.js built with the old Gatsby 0.12 version packs 13 podcast episodes and its size of 120Kb is bearable for now.</p>\\n<p>To sum it up, Gatsby is a cool and resourceful project, its popularity is surging (illustrated by a graph of downloads in the blog), and its basis is very solid: code splitting, service workers, offline first, and extensibility with plugins. My best wishes to the project and I will be looking forward to more ready-made templates and functional plugins, so a site can be all set in a few clicks by getting the packages together into package.json.</p>\\n<p>Build sites with Gatsby and prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/333532468&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nGatsby 1.0 - Blazing-fast static site generator for React.\\n\\nhttps://www.gatsbyjs.org/\\n\\n\\n\",\"frontmatter\":{\"title\":\"#13 - Gatsby\",\"date\":\"July 17, 2017\"}}}],\"pathPrefix\":\"\",\"first\":false,\"last\":false,\"index\":2,\"pageCount\":5,\"additionalContext\":{}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2.json\n// module id = 422\n// module chunks = 157285553617042"],"sourceRoot":""}