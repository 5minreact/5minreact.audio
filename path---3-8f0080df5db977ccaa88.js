webpackJsonp([0xa66b96fba949],{423:function(e,t){e.exports={pathContext:{group:[{node:{fields:{slug:"/012-webpack-pnpm-typescript/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/331989237&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<ul>\n<li><a href="https://medium.com/webpack/webpack-3-official-release-15fd2dd8f07b">https://medium.com/webpack/webpack-3-official-release-15fd2dd8f07b</a></li>\n<li><a href="https://twitter.com/dan_abramov/status/880457799272210432">https://twitter.com/dan_abramov/status/880457799272210432</a></li>\n<li><a href="https://medium.com/@TheLarkInn/leaving-for-microsoft-4f386c458693">https://medium.com/@TheLarkInn/leaving-for-microsoft-4f386c458693</a></li>\n<li><a href="https://medium.com/pnpm/pnpm-version-1-is-out-935a07af914">https://medium.com/pnpm/pnpm-version-1-is-out-935a07af914</a></li>\n<li><a href="https://github.com/pnpm/awesome-pnpm">https://github.com/pnpm/awesome-pnpm</a></li>\n<li><a href="https://blogs.msdn.microsoft.com/typescript/2017/06/27/announcing-typescript-2-4/">https://blogs.msdn.microsoft.com/typescript/2017/06/27/announcing-typescript-2-4/</a></li>\n<li><a href="http://isfiberreadyyet.com/">http://isfiberreadyyet.com/</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>The final webpack 3 release is out. I usually don’t rush it with installing versions ending with .0.0, but this time I decided to give webpack 3.0.0 a try.</p>\n<p>There is a new feature description post in the webpack blog, and the so-called Scope Hoisting caught my eye right away. This piece won’t work right away after the upgrade - a special plugin called ModuleConcatenationPlugin has to be added to the configuration. As a result by bundle.js file now only contains 7 functions instead of a hundred tiny module wrappers. Why is it seven and not one? We can get some clues via a certain command line flag which outputs additional information about the module assembly process and helps understand why some modules couldn’t be combined into one.</p>\n<p>As a person who hasn’t dug too deep into webpack algorithms, I can only see that the modules from node_modules folder and the external ones remained apart, but the reason is still to be figured out.</p>\n<p>Another mystery is why adding ModuleConcatenationPlugin causes watch mode to stop. It’s not just me: there is already an issue on Github and many users have run into this problem. In addition, ModuleConcatenationPlugin breaks Hot Module Replacement. </p>\n<p>Actually, adding a new plugin and a new compiler option is so typical of webpack and our whole Javascript ecosystem!</p>\n<p>This matter was recently raised in a small Twitter thread, where Dan Abramov once again claimed that the less configuration, the better.\nQuote:</p>\n<p>Libraries shouldn’t ask users to modify configs. This is unsustainable and often very hard to compose. Very hostile to beginners.\nBeing official, Create React App makes it harder for those libraries to justify this. Helping move ecosystem to less config solutions.</p>\n<p>End quote.</p>\n<p>Getting back to webpack itself.</p>\n<p>One of webpack core developers, Sean Larkin, wrote in his blog that he is getting a new job and will join Microsoft in two weeks to work on Developer Tools for Edge browser! I’m not sure what his previous job was - I may have seen finance industry mentioned somewhere. I do like this kind of transition: if Sean used to work on a project for finance and devise utilities for us developers as a pastime, now he can work on development utilities full-time. As Sean pointed out in his blog, he will have more time to dedicate to webpack in particular.</p>\n<p>As for me, to keep things interesting, along with upgrading to webpack 3, I’ve tested the new pnpm 1.0 package manager release. I have already talked about its specifics compared to npm and yarn in one of the earlier episodes of “5 minutes of React”. For instance, rather than copying files to the node_modules folder, pnpm package manager creates hard links to its cache. This saves a considerable amount of space if multiple projects are using the same packages.</p>\n<p>So I deleted node_modules, added webpack 3.0 to package.json, and launched pnpm install - and it’s impressively fast!</p>\n<p>On the downside, I noticed that the “pnpm outdated” results in the same output as “npm outdated”, which means all my packages are linked and it’s not clear which versions are in fact up-to date.\nI had to use an external tool: npm-check.\nThere is a corresponding ticket on Github issues and looking forward “pnpm outdated” command to be fixed.</p>\n<p>After the installation pnpm generated a shrinkwrap.yaml file for me. To check how shrinkwrap.yaml works for second installation, I deleted node_modules and executed a “time pnpm install” command. The second installation took 4.5 seconds, out of which the packages themselves were linked in about a second, while the rest of the time was spent on webpack post-install scripts, uglifyjs-webpack-plugin, and fsevents.</p>\n<p>I even tried installing the packages in offline mode, just turning off Wi-Fi, then delete node_modules and run “pnpm install” again. The packages got installed just as fast (in a little over a second), but then the fsevents installation script froze while downloading binaries for my operating system.</p>\n<p>How will pnpm develop further on? In a blog post about the version 1.0 there are a few paragraphs shedding some light on this matter.</p>\n<p>First of all, even faster speed! If the packages are already downloaded into cache, pnpm install should be done in no longer than a second.</p>\n<p>Secondly, although the hard link and symlink approach makes it even faster than yarn, there are a few edge cases where yarn still excels. There are plans to handle this so that in the end pnpm is faster in any circumstances.    </p>\n<p>Thirdly, pnpm code base should be simplified, as currently contributing to it is rather complicated.</p>\n<p>Finally, a PR campaign is required (PR as in publicity, not Pull Request). Although pnpm is public for a longer period of time than Yarn, it is far less popular. So more articles, more documentation, and more interesting tools will be created to promote pnpm. Let’s make our awesome list huge!</p>\n<p>The installation is very straightforward: “npm install -g pnpm” - give it a try after this episode!</p>\n<p>But I didn’t stop here. As soon as I upgraded to webpack 3 via pnpm, I realized that TypeScript 2.4 was already out! Dynamic import, string enums, and a some type inference improvements, which are, as always, accompanied by an excellent description and examples in the Typescript blog. Everything worked out of the box in my project after I upgraded to Typescript 2.4.</p>\n<p>All in all, an upgrade of three tools at once to their new cutting-edge versions didn’t bring me any trouble (apart from the broken watch mode in webpack with ModuleConcatenationPlugin). </p>\n<p>Finally, just before recording this episode, I decided to take a look at the isfiberreadyyet.com page - and there are just 4 warning messages left to be fixed! </p>\n<p>Code with React and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/331989237&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n\n- https://medium.com/webpack/webpack-3-official-release-15fd2dd8f07b\n- https://twitter.com/dan_abramov/status/880457799272210432\n- https://medium.com/@TheLarkInn/leaving-for-microsoft-4f386c458693\n- https://medium.com/pnpm/pnpm-version-1-is-out-935a07af914\n- https://github.com/pnpm/awesome-pnpm\n- https://blogs.msdn.microsoft.com/typescript/2017/06/27/announcing-typescript-2-4/\n- http://isfiberreadyyet.com/\n\n\n',frontmatter:{title:"#12 - webpack 3.0.0, pnpm 1.0, TypeScript 2.4",date:"July 6, 2017"}}},{node:{fields:{slug:"/011-webpack3-babel7-mobx-state-tree-preact-egghead/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/329453032&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<ul>\n<li><a href="https://facebook.github.io/react/blog/2017/06/13/react-v15.6.0.html">https://facebook.github.io/react/blog/2017/06/13/react-v15.6.0.html</a></li>\n<li><a href="https://twitter.com/dan_abramov/status/875149571688734721">https://twitter.com/dan_abramov/status/875149571688734721</a></li>\n<li><a href="https://medium.com/webpack/webpack-3-official-release-15fd2dd8f07b">https://medium.com/webpack/webpack-3-official-release-15fd2dd8f07b</a></li>\n<li><a href="https://github.com/babel/notes">https://github.com/babel/notes</a></li>\n<li><a href="https://github.com/mobxjs/mobx-state-tree">https://github.com/mobxjs/mobx-state-tree</a></li>\n<li><a href="https://egghead.io/courses/up-and-running-with-preact">https://egghead.io/courses/up-and-running-with-preact</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>On the 13th of June a new version of React has been released under the number of 15.6 - not yet 16 and not a fiber, but as mentioned in the accompanying blog post, the team is making some final arrangements and cleaning up in preparation for the big release. </p>\n<p>The new version 15.6 brings a few fixes for input field bugs, especially in IE11.</p>\n<p>Deprecation warnings are now output as console.warning (which was done via console.error in the previous version). The main idea is to avoid confusing the user about which messages are actually important. Deprecation warnings don’t require immediate action and can be fixed later. Standard warnings, on the other hand, still use console.error - for instance, when there is no key attribute specified for repeated elements.</p>\n<p>However, in the nature of things, right after the release a shocking iOS bug was revealed: onChange event didn’t get triggered by radio buttons, and it will be fixed in version 15.6.1.</p>\n<p>Dan Abramov complained on Twitter:</p>\n<p>Also, ugh, releasing 15.x gets harder and harder. Can’t wait to get to 16 and release from master.</p>\n<p>Have you already upgraded to webpack 2? If not, it’s too late to change horses in midstream: the new webpack 3 just have been released!</p>\n<p>In fact, this release is not so major as webpack 2 once was, but the pace of development is exciting. </p>\n<p>By the way the webpack team is accepting donations via the Opencollective website; I have been their subscriber and supporter for a while now, and you are welcome to join - little drops make an ocean.</p>\n<p>The Babel team doesn’t rest either and is putting all their effort into Babel 7, which is already available as alpha 12. Have you heard of Babel Notes, the monthly notes by developers on their progress, plans, and unresolved issues? I’m providing you a link, it is a great read: brief and informative enough to get an idea of where we are heading.</p>\n<p>Guys on the React team used to provide a similar outline called core-notes, but, unfortunately, they are no longer doing it.</p>\n<p>It recently crossed my mind: what about building a project with React 16 master, combined with webpack 3 and Babel 7 alpha? Quite a hardcore pack for a hackathon.</p>\n<p>Moving on, a new version of mobx-state-tree 0.7 was released. It’s a state container created by MobX author which makes use of MobX internally while taking advantage of the best Redux and MobX practices. The good news is that the warning “This package is a work in progress, stay tuned” that was in the Readme just a couple of months ago, is now gone. There is a lot of healthy commit activity by the authors and the project is really great. I’m planning to use it in production soon and I’ll definitely let you know some details on how it goes in this podcast.</p>\n<p>Another update: a new video course on Preact has been published on egghead.io, about an hour of content broken down into 12 parts. I haven’t had time to watch it yet, but the titles are very intriguing. A quick reminder: Preact is an alternative to React which can work as a drop-in replacement, I have talked about it in a one of previous episode of 5 minutes of React and I’ve been using it myself.</p>\n<p>Code with React and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/329453032&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n\n- https://facebook.github.io/react/blog/2017/06/13/react-v15.6.0.html\n- https://twitter.com/dan_abramov/status/875149571688734721\n- https://medium.com/webpack/webpack-3-official-release-15fd2dd8f07b\n- https://github.com/babel/notes\n- https://github.com/mobxjs/mobx-state-tree\n- https://egghead.io/courses/up-and-running-with-preact\n\n\n',frontmatter:{title:"#11 - React 15.6, Webpack 3, Babel Notes, mobx-state-tree 0.7, Preact on egghead.io",date:"June 22, 2017"}}},{node:{fields:{slug:"/010-react-wishlist/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/328216510&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<p>Dan Abramov asked his Twitter audience: “What would you want the React team to focus on in the next 6 months? Reply with a new thing, or Iike existing replies”. This request inspired a massive thread of a few hundred tweets…</p>\n<ul>\n<li><a href="https://twitter.com/dan_abramov/status/871406752016863232">https://twitter.com/dan_abramov/status/871406752016863232</a></li>\n<li><a href="https://twitter.com/dan_abramov/status/871769329079025664">https://twitter.com/dan_abramov/status/871769329079025664</a></li>\n<li><a href="https://github.com/Microsoft/TypeScript-React-Starter">https://github.com/Microsoft/TypeScript-React-Starter</a></li>\n<li><a href="https://5minreact.audio/002-jsx2/">https://5minreact.audio/002-jsx2/</a></li>\n<li><a href="https://github.com/facebook/jsx/issues/65">https://github.com/facebook/jsx/issues/65</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>Dan Abramov asked his Twitter audience: “What would you want the React team to focus on in the next 6 months? Reply with a new thing, or Iike existing replies”. This request inspired a massive thread of a few hundred tweets. People suggested new ideas or liked the ones proposed earlier, while Dan commented and reviewed pretty much every suggestion, so the discussion turned out to be lively and bilateral. The next day Dan compiled and posted a community wishlist. It is definitely not an official roadmap for the team, but it’s nevertheless interesting by itself. Obviously, some points are already on the team’s agenda. The list is brief, so I can outline it:</p>\n<ul>\n<li>\n<p>A new API for components. Functional components need lifecycle methods, and classes make teaching quite hard</p>\n</li>\n<li>\n<p>Smaller bundle size</p>\n</li>\n<li>\n<p>Animation for component mounting and unmounting</p>\n</li>\n<li>\n<p>Fixing the context feature</p>\n</li>\n<li>\n<p>Functional component optimization (as a reminder, right now functional components aren’t optimized for performance, and in some cases they are slower compared to classes, although they seem more lightweight)</p>\n</li>\n<li>\n<p>Better diversity on the team</p>\n</li>\n<li>\n<p>Better typescript support: in particular, official definitions should be released and built into Create React App. I’m personally all for this one. Although the current community versions of TypeScript typings for React are rather decent, and using Typescript with Create React App is a well-established practice. Microsoft even has their own template TypeScript-React-Starter, which relies on Create React App</p>\n</li>\n<li>\n<p>Make setState great again! Just kidding, the idea is to make setState a viable alternative to Redux</p>\n</li>\n<li>\n<p>Official custom rerenderer API. What is a rerenderer? The most well-known examples are ReactDOM and ReactNative. There are also rerenderers aimed at virtual or augmented reality. Any of us can write our own rerenderers as well, but there is no offiicial API for them yet</p>\n</li>\n<li>\n<p>Server-side rendering: fixes for some issues along with Create React App support</p>\n</li>\n<li>\n<p>Official hot reloading mechanism</p>\n</li>\n<li>\n<p>JSX version 2. By the way, I have discussed its new syntax version in the second episode of “5 minutes of React”, and you can check it out for more details. </p>\n</li>\n</ul>\n<p>Our best wishes for the team’s endeavors.</p>\n<p>Code with React and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/328216510&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n\nDan Abramov asked his Twitter audience: “What would you want the React team to focus on in the next 6 months? Reply with a new thing, or Iike existing replies”. This request inspired a massive thread of a few hundred tweets...\n\n- https://twitter.com/dan_abramov/status/871406752016863232\n- https://twitter.com/dan_abramov/status/871769329079025664\n- https://github.com/Microsoft/TypeScript-React-Starter\n- https://5minreact.audio/002-jsx2/\n- https://github.com/facebook/jsx/issues/65\n\n\n',frontmatter:{title:"#10 - React Wishlist",date:"June 15, 2017"}}},{node:{fields:{slug:"/009-mobx-over-redux/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/325420216&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<p>Should I use MobX over Redux? When, why and whom should try MobX?</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=83v8cdvGfeA">https://www.youtube.com/watch?v=83v8cdvGfeA</a> - Understanding MobX vs Redux (4min)</li>\n<li><a href="https://www.youtube.com/watch?v=76FRrbY18Bs">https://www.youtube.com/watch?v=76FRrbY18Bs</a> - Preethi Kasireddy - MobX vs Redux: Comparing the Opposing Paradigms - React Conf 2017 (25m)</li>\n<li><a href="https://www.youtube.com/watch?v=ZGVwMkrL2n0">https://www.youtube.com/watch?v=ZGVwMkrL2n0</a> - Comparing Redux and MobX with two CTO’s and React experts (1h17m)</li>\n<li><a href="https://egghead.io/courses/manage-complex-state-in-react-apps-with-mobx">https://egghead.io/courses/manage-complex-state-in-react-apps-with-mobx</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>Is there any point in using MobX if we already have Redux? If there is, who could benefit from it, when and in what kind of projects?</p>\n<p>Some introduction for starters. Everyone has heard about Redux - a library for state management in Javascript applications. Redux is not bound to React, and it can be combined with any framework or even used without any browser rendering framework at all, for instance, on the server, although it is most widely used in tandem with React.</p>\n<p>You may have heard nothing but the name about MobX, so I’ll just briefly mention that it is also a state management library. MobX can be used in combination with any framework as well, but it has gained most recognition in the React ecosystem.</p>\n<p>That said, MobX and Redux are poles apart, but that makes comparing them even more interesting.</p>\n<ul>\n<li>Redux requires immutable data structures, while MobX, on the contrary, embraces mutability.</li>\n<li>Redux takes a functional approach, but MobX promotes the use of classes, which is closer to the traditional - Java or C++ style of object-oriented programming</li>\n<li>Redux grants total control of data flow (which sometimes results in a lot of boilerplate code); in contrast, MobX is full of magic built into in the library itself, which allows for less coding in the end.</li>\n</ul>\n<p>And so on.</p>\n<p>So here is my view on the MobX versus Redux dilemma. </p>\n<p>If you are in the process of learning React and its ecosystem, if you are still on your way to be a top-notch frontend developer and you are looking for a project involving React - study Redux, practice it, as it can be found everywhere - there is a huge ecosystem of tools, utility libraries, middleware, and a multitude of production projects, which means a lot of job opportunities for React+Redux stack. </p>\n<p>If you have already passed a junior Redux developer stage, if you are the decision-maker when it comes to the technology stack, and you are a part of a team ready to experiment, you should definitely give MobX a try.</p>\n<p>Note that I’m not emphasizing technicalities, but rather focusing on the business reality: today Redux is the ABC of React development, while MobX is complementary knowledge for enthusiasts.</p>\n<p>Personally, when I discovered and tried MobX, I found my project development to be far more productive and effective!</p>\n<p>Sometimes Redux and MobX are compared based on project size, for example, MobX is considered more suitable for smaller projects, while Redux serves best for the larger ones. However, I have also read completely opposite claims that small projects can be implemented in Redux, and MobX is more appropriate for larger enterprises. I think these arguments are too weak: experience shows that projects of all types and sizes succeed with both Redux and MobX. </p>\n<p>Regarding large projects, it is often claimed that the huge code base is too hard to decipher for  new developers. Redux is supposed to structure the project thanks to a clear separation into actors, reducers and selectors - just a few strands for weaving quite a spaghetti code! Same as MobX, in fact. Effective code structure is a matter equally important for both libraries. The only difference is the lack of articles on “how to structure a MobX application” all over the internet, simply due to MobX being less widespread. </p>\n<p>Moving on to criticism of excessive magic in MobX. Additional abstraction is vital for building complex systems, aren’t they? Indeed, we don’t write websites in machine code. The correct balance is what really matters here. Too much abstraction and magic can be inconvenient, but when is it too much exactly? This would be a subjective estimate. In my view, MobX has just the appropriate level of magic, and there is no need to graduate from Hogwarts to understand it and use it effectively.</p>\n<p>As for performance, it also seems to be a draw. I’ll just point out that MobX delivers efficient applications “out of the box”, while Redux still requires learning some basic principles and best practices for performance. In the end a MobX application would be just as fast as a well-written Redux one.</p>\n<p>In terms of the ecosystem of utility libraries, middleware and developer tools, Redux is definitely a step ahead. However, I would say MobX’s ecosystem is developed well enough to build actual applications conveniently and efficiently.</p>\n<p>A major point to consider is whether the data is derived or computed. If an application relies heavily on derived data, its dependency graph would be much more straightford, clear and maintainable when described using MobX as opposed to Redux and its selectors.</p>\n<p>We often hesitate to choose a less popular solution as we fear facing the problems and questions we might not find answers for on Stack Overflow. We fear the frustrating lack of documentation. We are afraid of being brought to a standstill by critical bugs that don’t get fixed for months or years as the community is small and the main developer’s priorities lie elsewhere. They might eventually give up, and we would be left with nothing but a sudden burden of legacy code. All these fears can apply to MobX, it is just a matter of how much risk we are willing to take.</p>\n<p>I have been working in the MobX ecosystem for over a year, and I think the risk is considerably lower now; I feel I am standing on firm ground. After all, MobX is the state management library second only to Redux. Nowadays using cerebral or technologies like cycle.js, Inferno, or even  Elm and PureScript is a much duller choice, in my view.</p>\n<p>Don’t be afraid of MobX, give it a go!</p>\n<p>In this episode I have deliberately omitted the technical details and focused on the general philosophy instead.</p>\n<p>Not to leave you thirsty for raw information, here are some links to useful resources. </p>\n<p>The first one is a pretty old four-minute video comparing the mechanisms of Redux and MobX. </p>\n<p>The second link is a video of a talk called “MobX vs Redux: Comparing the Opposing Paradigms” which was given by Preethi Kasireddy at React Conf 2017.</p>\n<p>The third one is a live discussion between two great CTOs, Pau Ramon and Ilya Zayats. Make sure you don’t miss the Q&#x26;A part in the end.</p>\n<p>Finally, following the good old principle of “Show me your code and I’ll tell you who you are”, check out this MobX course by the library author Michel Westrate at egghead.io, which includes a lot of comprehensive examples.</p>\n<p>Code with React and MobX and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/325420216&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n\nShould I use MobX over Redux? When, why and whom should try MobX?\n\n- https://www.youtube.com/watch?v=83v8cdvGfeA - Understanding MobX vs Redux (4min)\n- https://www.youtube.com/watch?v=76FRrbY18Bs - Preethi Kasireddy - MobX vs Redux: Comparing the Opposing Paradigms - React Conf 2017 (25m)\n- https://www.youtube.com/watch?v=ZGVwMkrL2n0 - Comparing Redux and MobX with two CTO\'s and React experts (1h17m)\n- https://egghead.io/courses/manage-complex-state-in-react-apps-with-mobx\n\n',frontmatter:{title:"#9 - MobX over Redux",date:"May 31, 2017"}}},{node:{fields:{slug:"/008-pnpm/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324063275&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<p>pnpm - fast, disk space efficient package manager, drop-in replacement for npm.</p>\n<ul>\n<li><a href="https://pnpm.js.org">https://pnpm.js.org</a></li>\n<li><a href="https://twitter.com/pnpmjs">https://twitter.com/pnpmjs</a></li>\n<li><a href="https://www.kochan.io/nodejs/why-should-we-use-pnpm.html">https://www.kochan.io/nodejs/why-should-we-use-pnpm.html</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>pnpm is an alternative package manager for Node.js. It is a drop-in replacement for npm, but faster and more efficient.</p>\n<p>Why not Yarn?\nAfter a few days of Yarn release, author of pnpm, Zoltan Kochan, realized that Yarn is just a small improvement over npm. Although it makes installations faster and it has some nice new features, it uses the same flat node_modules structure that npm does (since version 3).</p>\n<p>Prior to npm version 3, the node<em>modules structure was predictable and clean, as every dependency in node</em>modules had its own node_modules folder with all of its dependencies specified in package.json.</p>\n<p>This approach had two serious issues:</p>\n<ul>\n<li>frequently packages were creating too deep dependency trees, which caused long directory paths issue on Windows</li>\n<li>packages were copy pasted several times when they were required in different dependencies</li>\n</ul>\n<p>To solve these issues, npm rethought the node_modules structure and came up with flattening in npm version 3.</p>\n<p>And flattened dependency trees come with a bunch of issues:</p>\n<ul>\n<li>modules can access packages they don’t depend on</li>\n<li>the algorithm of flattening a dependency tree is pretty complex</li>\n<li>some of the packages have to be copied inside one project’s node_modules folder</li>\n</ul>\n<p>Unlike npm vesion 3, pnpm tries to solve the issues that npm version 2 had, without flattening the dependency tree. </p>\n<p>In a node_modules folder created by pnpm, all packages have their own dependencies grouped together, but the directory tree is never as deep as with npm2. pnpm keeps all dependencies flat but uses symlinks to group them together.</p>\n<p>Flattening is hard. A package manager can be deterministic but no human can easily predict how will a flattened dependency tree look like. Pnpm not only has a lockfile, the files in its node_modules folder are organized always the same way, the way they are described in package.json files.</p>\n<p>To understand pnpm algorithm in details I recommend to read a blog post by Zoltan: “Why should we use pnpm?“.</p>\n<p>Pnpm is very efficien in Disk Space usage.\nWhen you install a package, it is saved in a global store on your machine, then pnpm creates a hard link from it instead of copying. For each version of a module, there is only ever one copy kept on disk. When using npm or yarn for example, if you have 100 packages using lodash, you will have 100 copies of lodash on disk. Pnpm allows you to save gigabytes of disk space!</p>\n<p>And all these hadrlinks and symlinks also work on Windows operating system!</p>\n<p> What about speed: pnpm is not only faster than npm, it is faster than Yarn. It is faster than Yarn both with cold and hot cache. Yarn copies files from cache whereas pnpm just links them from the global store.</p>\n<p> pnpm is 10 times faster than npm and 30% faster than Yarn - see benchmarks on GitHub.</p>\n<p>pnpm supports offline mode - it saves all the downloaded package tarballs in a local registry mirror. It never makes requests when a package is available locally. With the —offline parameter, HTTP requests can be prohibited at all.</p>\n<p>By default pnpm connects to registry.npmjs.org and works as a drop-in replacement for npm.</p>\n<p>Visit pnpm.js.org website and follow the @pnpmjs Twitter account for updates.</p>\n<p>Code with React and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324063275&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n\npnpm - fast, disk space efficient package manager, drop-in replacement for npm.\n\n- https://pnpm.js.org\n- https://twitter.com/pnpmjs\n- https://www.kochan.io/nodejs/why-should-we-use-pnpm.html\n\n',frontmatter:{title:"#8 - pnpm",date:"May 23, 2017"}}}],pathPrefix:"",first:!1,last:!1,index:3,pageCount:5,additionalContext:{}}}}});
//# sourceMappingURL=path---3-8f0080df5db977ccaa88.js.map