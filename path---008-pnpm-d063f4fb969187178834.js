webpackJsonp([0xf8a33b52663f],{410:function(e,t){e.exports={data:{site:{siteMetadata:{title:"5 minutes of React",author:"5 minutes of React"}},markdownRemark:{id:"/Users/petr/www/5minreact.audio/src/pages/008-pnpm/index.md absPath of file >>> MarkdownRemark",html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/324063275&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<p>pnpm - fast, disk space efficient package manager, drop-in replacement for npm.</p>\n<ul>\n<li><a href="https://pnpm.js.org">https://pnpm.js.org</a></li>\n<li><a href="https://twitter.com/pnpmjs">https://twitter.com/pnpmjs</a></li>\n<li><a href="https://www.kochan.io/nodejs/why-should-we-use-pnpm.html">https://www.kochan.io/nodejs/why-should-we-use-pnpm.html</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>pnpm is an alternative package manager for Node.js. It is a drop-in replacement for npm, but faster and more efficient.</p>\n<p>Why not Yarn?\nAfter a few days of Yarn release, author of pnpm, Zoltan Kochan, realized that Yarn is just a small improvement over npm. Although it makes installations faster and it has some nice new features, it uses the same flat node_modules structure that npm does (since version 3).</p>\n<p>Prior to npm version 3, the node<em>modules structure was predictable and clean, as every dependency in node</em>modules had its own node_modules folder with all of its dependencies specified in package.json.</p>\n<p>This approach had two serious issues:</p>\n<ul>\n<li>frequently packages were creating too deep dependency trees, which caused long directory paths issue on Windows</li>\n<li>packages were copy pasted several times when they were required in different dependencies</li>\n</ul>\n<p>To solve these issues, npm rethought the node_modules structure and came up with flattening in npm version 3.</p>\n<p>And flattened dependency trees come with a bunch of issues:</p>\n<ul>\n<li>modules can access packages they don’t depend on</li>\n<li>the algorithm of flattening a dependency tree is pretty complex</li>\n<li>some of the packages have to be copied inside one project’s node_modules folder</li>\n</ul>\n<p>Unlike npm vesion 3, pnpm tries to solve the issues that npm version 2 had, without flattening the dependency tree. </p>\n<p>In a node_modules folder created by pnpm, all packages have their own dependencies grouped together, but the directory tree is never as deep as with npm2. pnpm keeps all dependencies flat but uses symlinks to group them together.</p>\n<p>Flattening is hard. A package manager can be deterministic but no human can easily predict how will a flattened dependency tree look like. Pnpm not only has a lockfile, the files in its node_modules folder are organized always the same way, the way they are described in package.json files.</p>\n<p>To understand pnpm algorithm in details I recommend to read a blog post by Zoltan: “Why should we use pnpm?“.</p>\n<p>Pnpm is very efficien in Disk Space usage.\nWhen you install a package, it is saved in a global store on your machine, then pnpm creates a hard link from it instead of copying. For each version of a module, there is only ever one copy kept on disk. When using npm or yarn for example, if you have 100 packages using lodash, you will have 100 copies of lodash on disk. Pnpm allows you to save gigabytes of disk space!</p>\n<p>And all these hadrlinks and symlinks also work on Windows operating system!</p>\n<p> What about speed: pnpm is not only faster than npm, it is faster than Yarn. It is faster than Yarn both with cold and hot cache. Yarn copies files from cache whereas pnpm just links them from the global store.</p>\n<p> pnpm is 10 times faster than npm and 30% faster than Yarn - see benchmarks on GitHub.</p>\n<p>pnpm supports offline mode - it saves all the downloaded package tarballs in a local registry mirror. It never makes requests when a package is available locally. With the —offline parameter, HTTP requests can be prohibited at all.</p>\n<p>By default pnpm connects to registry.npmjs.org and works as a drop-in replacement for npm.</p>\n<p>Visit pnpm.js.org website and follow the @pnpmjs Twitter account for updates.</p>\n<p>Code with React and prosper!</p>',frontmatter:{title:"#8 - pnpm",date:"May 23, 2017"}}},pathContext:{slug:"/008-pnpm/",previous:{fields:{slug:"/007-amsterdam-pwa-realworld-prepack/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/323677823&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<p>News: </p>\n<ul>\n<li>React Amsterdam 2017</li>\n<li>Hacker News readers as Progressive Web Apps written in React, Preact, Svelte, Vue, Angular and viperHTML</li>\n<li>TodoMVC for the RealWorld™ — Exemplary fullstack Medium.com clone powered by React, Angular, Node, Django, and many more</li>\n<li>Prepack - a tool for making JavaScript code run faster.</li>\n</ul>\n<p>Links:</p>\n<ul>\n<li><a href="https://twitter.com/ReactAmsterdam">https://twitter.com/ReactAmsterdam</a></li>\n<li><a href="https://www.youtube.com/playlist?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M">https://www.youtube.com/playlist?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M</a> - React Amsterdam 2017 playlist</li>\n<li><a href="https://youtu.be/3J9EJrvqOiM?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M">https://youtu.be/3J9EJrvqOiM?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M</a> - Complexity: Divide and Conquer</li>\n<li><a href="http://divideandconquer.surge.sh/#1">http://divideandconquer.surge.sh/#1</a></li>\n<li><a href="https://github.com/tastejs/hacker-news-pwas">https://github.com/tastejs/hacker-news-pwas</a></li>\n<li><a href="https://medium.com/@ericsimons/introducing-realworld-6016654d36b5">https://medium.com/@ericsimons/introducing-realworld-6016654d36b5</a></li>\n<li><a href="https://github.com/gothinkster/realworld">https://github.com/gothinkster/realworld</a></li>\n<li><a href="https://prepack.io">https://prepack.io</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>On the 21st of April 2017 the yearly React Amsterdam conference took place. It is a major event in the React world, and interesting reports and videos have already been posted. The conference was divided into a main track for React and another one for React Native. The organizers have launched a contest for the best conference review post, and React Amsterdam’s Twitter page is constantly updated with links to new materials.</p>\n<p>A talk called «Complexity: Divide and Conquer» by Michel Weststrate, the MobX creator, particularly caught my attention. Its main point was breaking tasks into smaller ones. It is a simple and ordinary piece of advice, but the example Michael presented is much less obvious: a bookstore website where the UI is fundamentally separated from the business logic. First we can see the website where a book can be selected, added to cart and checked out. Then the whole application render is removed, and the browser screen turns empty, but we can still choose a book, add it to cart, and purchase it by calling certain methods on Store object in the console. Meanwhile, the application responds properly to changing the URL in the browser, the server receives the requests correctly, and the necessary data gets loaded.</p>\n<p>This can be achieved by following a few hygiene rules. React’s Life cycle methods should be avoided, in particular componentDidMount, which is often used to request data from the server. Additionally, the router shouldn’t select the components to render on its own, but rather change the state in Store. These and other useful tips will certainly help us divide and conquer!</p>\n<p>Another point for today’s podcast, apart from React Amsterdam, are Progressive web apps. You can check out the repository with PWA implemented in several frameworks: React, Preact, Svelte, Vue, Angular, and viperHTML. The application itself is a clone of Hacker News.</p>\n<p>If Hacker News clones are not your thing, here is a similar initiative: a blog platform called Real World, which is written using different technology stacks. </p>\n<p>What’s interesting is that apart from such front-end frameworks as React and Elm, the Real World repository also contains back-end implementations, including Node Express, Django, Rails, and Laravel. All of them rely on the same API, the front end is separate from the back end, and they can be combined. The author is planning to implement more examples based on various front- and back-end technologies, and contributors are welcome. There is a Medium post to accompany the repository.  </p>\n<p>Another Hot topic is the Prepack tool which speeds up JavaScript code initialization. A sensational new project by the Facebook team! It is still in early development and is not recommended for production use, but Twitter is already full of application benchmarks that show double startup speed.</p>\n<p>Prepack is a tool used on application source code, transforming it in order to speed up initialization at runtime. The idea is simple: any static computations that can be done at compile time should be done at compile time and not at runtime. Here is a clear example: imagine we want to write:</p>\n<p>const x = 2 + 3;</p>\n<p>this source code line would better be written as</p>\n<p>const x = 5</p>\n<p>to avoid computation while running the program in the browser or on the node.</p>\n<p>Internally Prepack uses Babel to parse the source code and construct an abstract syntactic tree (AST). Then it needs to be able to interpret Javascript code and evaluate expressions, and it can indeed do that! </p>\n<p>At the core of Prepack is an almost ECMAScript 5 compatible interpreter — implemented in JavaScript! The interpreter closely follows the ECMAScript 2016 Language Specification, with a focus on correctness and spec conformance. You can think of the interpreter in Prepack as a clean reference implementation of JavaScript.</p>\n<p>The interpreter has the ability to track and undo all effects, including all object mutations. This enables speculative optimizations.</p>\n<p>In addition to elementary Javascript expressions, Prepack optimization makes use of symbolic expressions traversing all possible options. For example, Date.now can return an abstract value. Prepack tracks all operations that are performed over abstract values. When branching over abstract values, Prepack will fork execution and explore all possibilities. Thus, Prepack implements a Symbolic Execution engine for JavaScript.</p>\n<p>There is a roadmap on prepack.io website. In the near future the developers plan to integrate Prepack into React Native tool chain and build some optimizations based on assumptions of the module system used by React Native.</p>\n<p>Medium term goals include full ECMAScript 6 conformance and lots of further optimizations, such as elimination of unused exported properties (similar to what treeshake in webpack does, although webpack can’t compute js code and only operates on AST level, so Prepack is expected to do a more thorough cleanup than webpack).</p>\n<p>In the long run the team plans to introduce execution flow analysis for bug hunting, side effect detection, type control,  as well as automated test generation leveraging symbolic execution features, and even a JavaScript virtual machine written in Javascript hosted in the browser for trying out new language features that can’t be transpiled with Babel. </p>\n<p>Check out the prepack.io website and try it on your own code base.</p>\n<p>Code with React and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/323677823&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n\nNews: \n- React Amsterdam 2017\n- Hacker News readers as Progressive Web Apps written in React, Preact, Svelte, Vue, Angular and viperHTML\n- TodoMVC for the RealWorld™ — Exemplary fullstack Medium.com clone powered by React, Angular, Node, Django, and many more\n- Prepack - a tool for making JavaScript code run faster.\n\nLinks:\n- https://twitter.com/ReactAmsterdam\n- https://www.youtube.com/playlist?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M - React Amsterdam 2017 playlist\n- https://youtu.be/3J9EJrvqOiM?list=PLNBNS7NRGKMHxfm0CcYNuINLdRw7r4a9M - Complexity: Divide and Conquer\n- http://divideandconquer.surge.sh/#1\n- https://github.com/tastejs/hacker-news-pwas\n- https://medium.com/@ericsimons/introducing-realworld-6016654d36b5\n- https://github.com/gothinkster/realworld\n- https://prepack.io\n\n',frontmatter:{title:"#7 - Amsterdam, PWA, RealWorld, Prepack",date:"May 20, 2017"}},next:{fields:{slug:"/009-mobx-over-redux/"},html:'<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/325420216&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n<p>Should I use MobX over Redux? When, why and whom should try MobX?</p>\n<ul>\n<li><a href="https://www.youtube.com/watch?v=83v8cdvGfeA">https://www.youtube.com/watch?v=83v8cdvGfeA</a> - Understanding MobX vs Redux (4min)</li>\n<li><a href="https://www.youtube.com/watch?v=76FRrbY18Bs">https://www.youtube.com/watch?v=76FRrbY18Bs</a> - Preethi Kasireddy - MobX vs Redux: Comparing the Opposing Paradigms - React Conf 2017 (25m)</li>\n<li><a href="https://www.youtube.com/watch?v=ZGVwMkrL2n0">https://www.youtube.com/watch?v=ZGVwMkrL2n0</a> - Comparing Redux and MobX with two CTO’s and React experts (1h17m)</li>\n<li><a href="https://egghead.io/courses/manage-complex-state-in-react-apps-with-mobx">https://egghead.io/courses/manage-complex-state-in-react-apps-with-mobx</a></li>\n</ul>\n<!-- end -->\n<p><strong>Transcript</strong></p>\n<p>Is there any point in using MobX if we already have Redux? If there is, who could benefit from it, when and in what kind of projects?</p>\n<p>Some introduction for starters. Everyone has heard about Redux - a library for state management in Javascript applications. Redux is not bound to React, and it can be combined with any framework or even used without any browser rendering framework at all, for instance, on the server, although it is most widely used in tandem with React.</p>\n<p>You may have heard nothing but the name about MobX, so I’ll just briefly mention that it is also a state management library. MobX can be used in combination with any framework as well, but it has gained most recognition in the React ecosystem.</p>\n<p>That said, MobX and Redux are poles apart, but that makes comparing them even more interesting.</p>\n<ul>\n<li>Redux requires immutable data structures, while MobX, on the contrary, embraces mutability.</li>\n<li>Redux takes a functional approach, but MobX promotes the use of classes, which is closer to the traditional - Java or C++ style of object-oriented programming</li>\n<li>Redux grants total control of data flow (which sometimes results in a lot of boilerplate code); in contrast, MobX is full of magic built into in the library itself, which allows for less coding in the end.</li>\n</ul>\n<p>And so on.</p>\n<p>So here is my view on the MobX versus Redux dilemma. </p>\n<p>If you are in the process of learning React and its ecosystem, if you are still on your way to be a top-notch frontend developer and you are looking for a project involving React - study Redux, practice it, as it can be found everywhere - there is a huge ecosystem of tools, utility libraries, middleware, and a multitude of production projects, which means a lot of job opportunities for React+Redux stack. </p>\n<p>If you have already passed a junior Redux developer stage, if you are the decision-maker when it comes to the technology stack, and you are a part of a team ready to experiment, you should definitely give MobX a try.</p>\n<p>Note that I’m not emphasizing technicalities, but rather focusing on the business reality: today Redux is the ABC of React development, while MobX is complementary knowledge for enthusiasts.</p>\n<p>Personally, when I discovered and tried MobX, I found my project development to be far more productive and effective!</p>\n<p>Sometimes Redux and MobX are compared based on project size, for example, MobX is considered more suitable for smaller projects, while Redux serves best for the larger ones. However, I have also read completely opposite claims that small projects can be implemented in Redux, and MobX is more appropriate for larger enterprises. I think these arguments are too weak: experience shows that projects of all types and sizes succeed with both Redux and MobX. </p>\n<p>Regarding large projects, it is often claimed that the huge code base is too hard to decipher for  new developers. Redux is supposed to structure the project thanks to a clear separation into actors, reducers and selectors - just a few strands for weaving quite a spaghetti code! Same as MobX, in fact. Effective code structure is a matter equally important for both libraries. The only difference is the lack of articles on “how to structure a MobX application” all over the internet, simply due to MobX being less widespread. </p>\n<p>Moving on to criticism of excessive magic in MobX. Additional abstraction is vital for building complex systems, aren’t they? Indeed, we don’t write websites in machine code. The correct balance is what really matters here. Too much abstraction and magic can be inconvenient, but when is it too much exactly? This would be a subjective estimate. In my view, MobX has just the appropriate level of magic, and there is no need to graduate from Hogwarts to understand it and use it effectively.</p>\n<p>As for performance, it also seems to be a draw. I’ll just point out that MobX delivers efficient applications “out of the box”, while Redux still requires learning some basic principles and best practices for performance. In the end a MobX application would be just as fast as a well-written Redux one.</p>\n<p>In terms of the ecosystem of utility libraries, middleware and developer tools, Redux is definitely a step ahead. However, I would say MobX’s ecosystem is developed well enough to build actual applications conveniently and efficiently.</p>\n<p>A major point to consider is whether the data is derived or computed. If an application relies heavily on derived data, its dependency graph would be much more straightford, clear and maintainable when described using MobX as opposed to Redux and its selectors.</p>\n<p>We often hesitate to choose a less popular solution as we fear facing the problems and questions we might not find answers for on Stack Overflow. We fear the frustrating lack of documentation. We are afraid of being brought to a standstill by critical bugs that don’t get fixed for months or years as the community is small and the main developer’s priorities lie elsewhere. They might eventually give up, and we would be left with nothing but a sudden burden of legacy code. All these fears can apply to MobX, it is just a matter of how much risk we are willing to take.</p>\n<p>I have been working in the MobX ecosystem for over a year, and I think the risk is considerably lower now; I feel I am standing on firm ground. After all, MobX is the state management library second only to Redux. Nowadays using cerebral or technologies like cycle.js, Inferno, or even  Elm and PureScript is a much duller choice, in my view.</p>\n<p>Don’t be afraid of MobX, give it a go!</p>\n<p>In this episode I have deliberately omitted the technical details and focused on the general philosophy instead.</p>\n<p>Not to leave you thirsty for raw information, here are some links to useful resources. </p>\n<p>The first one is a pretty old four-minute video comparing the mechanisms of Redux and MobX. </p>\n<p>The second link is a video of a talk called “MobX vs Redux: Comparing the Opposing Paradigms” which was given by Preethi Kasireddy at React Conf 2017.</p>\n<p>The third one is a live discussion between two great CTOs, Pau Ramon and Ilya Zayats. Make sure you don’t miss the Q&#x26;A part in the end.</p>\n<p>Finally, following the good old principle of “Show me your code and I’ll tell you who you are”, check out this MobX course by the library author Michel Westrate at egghead.io, which includes a lot of comprehensive examples.</p>\n<p>Code with React and MobX and prosper!</p>',excerpt:'\n<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/325420216&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>\n\nShould I use MobX over Redux? When, why and whom should try MobX?\n\n- https://www.youtube.com/watch?v=83v8cdvGfeA - Understanding MobX vs Redux (4min)\n- https://www.youtube.com/watch?v=76FRrbY18Bs - Preethi Kasireddy - MobX vs Redux: Comparing the Opposing Paradigms - React Conf 2017 (25m)\n- https://www.youtube.com/watch?v=ZGVwMkrL2n0 - Comparing Redux and MobX with two CTO\'s and React experts (1h17m)\n- https://egghead.io/courses/manage-complex-state-in-react-apps-with-mobx\n\n',frontmatter:{title:"#9 - MobX over Redux",date:"May 31, 2017"}}}}}});
//# sourceMappingURL=path---008-pnpm-d063f4fb969187178834.js.map