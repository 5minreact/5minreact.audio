{"version":3,"sources":["webpack:///path---5-ea41427f021a4ca903f6.js","webpack:///./.cache/json/5.json"],"names":["webpackJsonp","427","module","exports","pathContext","group","node","fields","slug","html","excerpt","frontmatter","title","date","pathPrefix","first","last","index","pageCount","additionalContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,MAAQC,QAAUC,KAAA,cAAoBC,KAAA,siMAAi6HC,QAAA,maAAq7EC,aAA4KC,MAAA,eAAAC,KAAA,kBAAgDP,MAAQC,QAAUC,KAAA,qBAA2BC,KAAA,2uNAAsRC,QAAA,mpBAAywNC,aAA2ZC,MAAA,mBAAAC,KAAA,kBAAkDC,WAAA,GAAAC,OAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,UAAA,EAAAC","file":"path---5-ea41427f021a4ca903f6.js","sourcesContent":["webpackJsonp([81823991089174],{\n\n/***/ 427:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"group\":[{\"node\":{\"fields\":{\"slug\":\"/002-jsx2/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320721705&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>The next version of JSX proposals.</p>\\n<ul>\\n<li><a href=\\\"https://github.com/facebook/jsx/issues/65\\\">https://github.com/facebook/jsx/issues/65</a></li>\\n<li><a href=\\\"https://facebook.github.io/reason/\\\">https://facebook.github.io/reason/</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>We all like JSX, don’t we? JSX is a markup syntax similar to HTML used for describing component appearance. It has been around since the beginning and practically hasn’t changed. Since then many ideas and suggestions have surged that could improve JSX and streamline the process of writing and reading code. However, releasing a new JSX with the next version of React isn’t so simple, as compatibility could be broken. Just imagine how many external tools rely on the current version! That includes the Babel plugin, the highlight and autofill plugins in such text editors as Sublime, Atom, and Vim, as well as the built-in support in WebStorm and Visual Studio Code; even the TypeScript compiler can convert JSX into native Javascript on its own.</p>\\n<p>Introducing these changes requires thorough preparation, along with an extensive collection of features to be implemented all in a single simultaneous release! The release would be huge, and its details should be published in advance to allow the developers of external tools, editors and IDEs some time to adjust. Let’s call this massive update JSX 2.0 - this is the name Sebastian, one of the key React developers, used for his GitHub ticket about a month ago. </p>\\n<p>By the way, JSX is not only used by React, but also by Facebook’s own Reason project. Reason is a language that resembles Javascript with a functional twist, built upon the OCaml compiler. The JSX variation there is slightly different from the one we use in React. The Facebook team would like to have React and Reason variations unified as a part of the JSX 2.0 effort.</p>\\n<p>Getting back to the ticket number 65 in Facebook’s JSX repository, here are the ideas already suggested there.</p>\\n<p>Attribute names should be evaluated. How are the attributes in JSX written at the moment? For instance, I open a tag for MyButton component, write an attribute name such as “text”, followed by an equals sign, and a variable with its value in curly brackets. However, I can’t put a variable to the left of the equals sign in order to set the attribute name to its value at runtime.</p>\\n<p>Technically we can already use the “object spread” operator (triple dot) to evaluate attribute names dynamically. JSX 2.0 is, in turn, offering a possibility to specify a variable or a Javascript expression in the left part of the assignment so that its value becomes the attribute name.</p>\\n<p>Another suggestion is to add some sugar into passing parameters to a component. How often do you have to write key={key}, item={item}, color={color} in tag attributes, where the attribute name coincides with the name of the variable storing the attribute value? A parallel can be drawn with ES2015 and its handy object creation syntax: variable names are listed in curly brackets separated by commas, resulting in an object whose fields correspond to the specified variables in names and values.</p>\\n<p>It would be great to have a similar mechanism in JSX: for example, when I open the MyComponent tag and list a few variables such as key, item, and color, separated by commas in curly brackets right after the tag name, these variables are passed to the component as props named key, item, and color.</p>\\n<p>There is another inconvenience here: if an attribute value should be passed as a number, it has to be enclosed in curly brackets, for instance, count={10}. Why not simply write count=10 with no brackets or quotations? Looking forward to get this in JSX 2.0!</p>\\n<p>What about if/else branching in JSX? Now, whenever we need to return a component, we have to resort to a ternary operator or a logical AND operator (that is, conjunction, or double ampersand). A more straightforward if construction in Javascript doesn’t return anything, so the current version of JSX doesn’t allow to use a simple if statement in curly brackets. Hence the suggestion to introduce the so-called do expressions that would allow to use if, for, and other purely imperative constructions within JSX.</p>\\n<p>Finally, why do we need curly brackets around expressions at all? What if I do following: open a div tag, write an x+y expression, close the div tag. I would see the x+y text wrapped in div. In order for the x+y expression to be evaluated as a sum of two variables, they have to be enclosed in curly brackets. However, as the author of the suggestion points out, experience shows that simple static text is much less common in JSX than computable expressions. Let’s change the syntax so that Javascript expressions don’t require curly brackets, while text should be enclosed in quotation marks. We would thus give up curly brackets in one case and add quotation marks in another, so what is more preferable, more readable? This discussion is still ongoing, and some alternative suggestions can be found in the comments.</p>\\n<p>And what do you think of XML namespaces in JSX? One of the arguments in their favor is the following: currently there are two reserved attributes, key and ref, which could belong to their own namespace, and the components themselves could be distributed into namespaces as well. Although, in my view, this can go too far into XML imitation. Just remember the epic XSLT technology!</p>\\n<p>I have mentioned just a few basic points from the original ticket number 65. It is followed by a thread of more than a hundred comments linking to other tickets - a perfect read for quiet evenings.</p>\\n<p>In any case, when the release day approaches (which isn’t happening any time soon), we will not miss it.</p>\\n<p>Code with React and prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320721705&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nThe next version of JSX proposals.\\n- https://github.com/facebook/jsx/issues/65\\n- https://facebook.github.io/reason/\\n\\n\",\"frontmatter\":{\"title\":\"#2 - JSX 2.0\",\"date\":\"May 3, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/001-react-fiber/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320475678&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>React Fiber is an ongoing reimplementation of React’s core algorithm. It is the culmination of over two years of research by the React team.</p>\\n<ul>\\n<li><a href=\\\"http://isfiberreadyyet.com\\\">http://isfiberreadyyet.com</a></li>\\n<li><a href=\\\"https://github.com/facebook/react/issues/7942\\\">https://github.com/facebook/react/issues/7942</a></li>\\n<li><a href=\\\"https://github.com/acdlite/react-fiber-architecture\\\">https://github.com/acdlite/react-fiber-architecture</a></li>\\n<li><a href=\\\"https://www.facebook.com/groups/2003630259862046/permalink/2054053404819731/\\\">https://www.facebook.com/groups/2003630259862046/permalink/2054053404819731/</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>The main idea behind React is full rerendering upon any change in data. However, as we all know, there is much more to React operation than that. An internal data structure called Virtual DOM comes into action to describe the appearance of our application.</p>\\n<p>When a page is loaded and the ReactDOM.render() function is called in our Javascript code, React builds a tree component, the Virtual DOM, which is then rendered and displayed by the browser.</p>\\n<p>By the way, the fact that the process of Virtual DOM construction is separate from the rendering itself gave rise to React Native, which renders into native mobile operating system components for iOS and Android.</p>\\n<p>So the Virtual DOM is constructed, stored in the memory and displayed on the screen. Then an event occurs that prompts React to perform a new Virtual DOM construction: for example, the “setState” method or the “forceUpdate” method is called. This new Virtual DOM is compared to the old one stored the application memory, the changes are evaluated, and a procedure is drawn up to update the actual DOM in the browser (or update the application screen in iOS or Android, if React Native is involved). </p>\\n<p>The algorithm of Virtual DOM comparison is called Reconciliation, and it contains a variety of optimization routines. For instance, if a tree component has been substituted by another one, the whole subtree is treated as a new one, and further comparison deeper into the tree is not performed. Another example of optimization is the key attribute essential for lists of nodes of the same type.</p>\\n<p>We thus have the core Reconciliation algorithm at our disposal, along with several rendering engines: for browsers, for iOS, and for Android.</p>\\n<p>Fiber is a new implementation of the algorithm still in development, based on two years of research and experiments. Although the Reconciliation and the rendering stages are separate, the final DOM and Native rendering engines will require some revision or rewriting in order to support the new architecture and make use of all the React Fiber advantages.</p>\\n<p>What are these advantages?</p>\\n<p>The current implementation implies traversing the tree recursively and calling all render() functions within the same tick of the Javascript event loop. The upcoming implementation may postpone calls to render() for some components (or subtrees) giving way to some desynchronization. For example, if a certain part of the application does not rely on the screen, why construct a Virtual DOM for it then? In addition, prioritized rendering would be helpful, so that high-priority tasks like user action animation would be carried out without skipping any frames, which would be achieved by postponing the less important tasks, such as displaying a large downloadable element of content. </p>\\n<p>What matters most when visualizing the user interface is maintaining smooth transitions and high FPS, and simultaneous rendering of all elements is by no means a must. However, React should smarten up in this case, so that calls to the render() function are planned correctly, and this is the very basis of the new React Fiber algorithm.</p>\\n<p>So we can conclude that Fiber’s primary goal is providing planning mechanisms. In particular, it should enable us to do the following:</p>\\n<ul>\\n<li>Pause a task to get back to it later</li>\\n<li>Set priorities for routines</li>\\n<li>Reuse the results of previous work</li>\\n<li>Halt a task if it is no longer needed</li>\\n</ul>\\n<p>The whole process of Virtual DOM construction then has to be broken down into smaller tasks which can be launched, paused and arranged by priority. From here arises the idea of a unit of work.</p>\\n<p>React has promoted the approach of pure functions for user interface rendering. Thus a particular component can be treated as a function of certain data that returns an instance of that component. However, as it can include other components, nested function calls are generated. If we put React aside and focus on functions that call each other, we end up with the idea of a stack. Every time a nested function call is made, a new stack frame is created to store the data for the function currently being executed.</p>\\n<p>What if React could manage this stack by itself, halt execution or prioritize certain functions? We would end up with a virtual stack machine. It would no longer be Javascript handling the function call stack, but React itself!</p>\\n<p>This approach has obvious performance drawbacks: apart from the overhead of implementing a specific Javascript stack machine, all data is stored in a heap, as opposed to a native Javascript stack, which is a bit less efficient.</p>\\n<p>On the other hand, if the function call tree is broken into smaller units of work, a dedicated stack implementation allows to set priorities for some functions with requestAnimationFrame, and postpone others in requestIdleCallback. As a bonus, the results of individual render functions can be reused, as they are no longer destroyed along with the native Javascript stack, but are in heap instead.</p>\\n<p>Fiber offers a few other handy benefits. One of them is the render() function returning an array of components, removing the need to group them into an additional div.</p>\\n<p>I will include some links to further technical specifications in the notes for this podcast.</p>\\n<p>An important aspect of the new React Fiber algorithm development is the support for all the features provided in the current version, including lifecycle hooks and such methods as setState, forceUpdate, and shouldComponentUpdate. It is still a work in progress, and React Fiber is the team’s main project and focus point for the rest of the year. Development progress is even tracked as percentage at isfiberreadyyet.com.</p>\\n<p>This is it for now. Code with React and prosper.</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320475678&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nReact Fiber is an ongoing reimplementation of React's core algorithm. It is the culmination of over two years of research by the React team.\\n- http://isfiberreadyyet.com\\n- https://github.com/facebook/react/issues/7942\\n- https://github.com/acdlite/react-fiber-architecture\\n- https://www.facebook.com/groups/2003630259862046/permalink/2054053404819731/\\n\\n\\n\",\"frontmatter\":{\"title\":\"#1 - React Fiber\",\"date\":\"May 2, 2017\"}}}],\"pathPrefix\":\"\",\"first\":false,\"last\":true,\"index\":5,\"pageCount\":5,\"additionalContext\":{}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---5-ea41427f021a4ca903f6.js","module.exports = {\"pathContext\":{\"group\":[{\"node\":{\"fields\":{\"slug\":\"/002-jsx2/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320721705&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>The next version of JSX proposals.</p>\\n<ul>\\n<li><a href=\\\"https://github.com/facebook/jsx/issues/65\\\">https://github.com/facebook/jsx/issues/65</a></li>\\n<li><a href=\\\"https://facebook.github.io/reason/\\\">https://facebook.github.io/reason/</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>We all like JSX, don’t we? JSX is a markup syntax similar to HTML used for describing component appearance. It has been around since the beginning and practically hasn’t changed. Since then many ideas and suggestions have surged that could improve JSX and streamline the process of writing and reading code. However, releasing a new JSX with the next version of React isn’t so simple, as compatibility could be broken. Just imagine how many external tools rely on the current version! That includes the Babel plugin, the highlight and autofill plugins in such text editors as Sublime, Atom, and Vim, as well as the built-in support in WebStorm and Visual Studio Code; even the TypeScript compiler can convert JSX into native Javascript on its own.</p>\\n<p>Introducing these changes requires thorough preparation, along with an extensive collection of features to be implemented all in a single simultaneous release! The release would be huge, and its details should be published in advance to allow the developers of external tools, editors and IDEs some time to adjust. Let’s call this massive update JSX 2.0 - this is the name Sebastian, one of the key React developers, used for his GitHub ticket about a month ago. </p>\\n<p>By the way, JSX is not only used by React, but also by Facebook’s own Reason project. Reason is a language that resembles Javascript with a functional twist, built upon the OCaml compiler. The JSX variation there is slightly different from the one we use in React. The Facebook team would like to have React and Reason variations unified as a part of the JSX 2.0 effort.</p>\\n<p>Getting back to the ticket number 65 in Facebook’s JSX repository, here are the ideas already suggested there.</p>\\n<p>Attribute names should be evaluated. How are the attributes in JSX written at the moment? For instance, I open a tag for MyButton component, write an attribute name such as “text”, followed by an equals sign, and a variable with its value in curly brackets. However, I can’t put a variable to the left of the equals sign in order to set the attribute name to its value at runtime.</p>\\n<p>Technically we can already use the “object spread” operator (triple dot) to evaluate attribute names dynamically. JSX 2.0 is, in turn, offering a possibility to specify a variable or a Javascript expression in the left part of the assignment so that its value becomes the attribute name.</p>\\n<p>Another suggestion is to add some sugar into passing parameters to a component. How often do you have to write key={key}, item={item}, color={color} in tag attributes, where the attribute name coincides with the name of the variable storing the attribute value? A parallel can be drawn with ES2015 and its handy object creation syntax: variable names are listed in curly brackets separated by commas, resulting in an object whose fields correspond to the specified variables in names and values.</p>\\n<p>It would be great to have a similar mechanism in JSX: for example, when I open the MyComponent tag and list a few variables such as key, item, and color, separated by commas in curly brackets right after the tag name, these variables are passed to the component as props named key, item, and color.</p>\\n<p>There is another inconvenience here: if an attribute value should be passed as a number, it has to be enclosed in curly brackets, for instance, count={10}. Why not simply write count=10 with no brackets or quotations? Looking forward to get this in JSX 2.0!</p>\\n<p>What about if/else branching in JSX? Now, whenever we need to return a component, we have to resort to a ternary operator or a logical AND operator (that is, conjunction, or double ampersand). A more straightforward if construction in Javascript doesn’t return anything, so the current version of JSX doesn’t allow to use a simple if statement in curly brackets. Hence the suggestion to introduce the so-called do expressions that would allow to use if, for, and other purely imperative constructions within JSX.</p>\\n<p>Finally, why do we need curly brackets around expressions at all? What if I do following: open a div tag, write an x+y expression, close the div tag. I would see the x+y text wrapped in div. In order for the x+y expression to be evaluated as a sum of two variables, they have to be enclosed in curly brackets. However, as the author of the suggestion points out, experience shows that simple static text is much less common in JSX than computable expressions. Let’s change the syntax so that Javascript expressions don’t require curly brackets, while text should be enclosed in quotation marks. We would thus give up curly brackets in one case and add quotation marks in another, so what is more preferable, more readable? This discussion is still ongoing, and some alternative suggestions can be found in the comments.</p>\\n<p>And what do you think of XML namespaces in JSX? One of the arguments in their favor is the following: currently there are two reserved attributes, key and ref, which could belong to their own namespace, and the components themselves could be distributed into namespaces as well. Although, in my view, this can go too far into XML imitation. Just remember the epic XSLT technology!</p>\\n<p>I have mentioned just a few basic points from the original ticket number 65. It is followed by a thread of more than a hundred comments linking to other tickets - a perfect read for quiet evenings.</p>\\n<p>In any case, when the release day approaches (which isn’t happening any time soon), we will not miss it.</p>\\n<p>Code with React and prosper!</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320721705&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nThe next version of JSX proposals.\\n- https://github.com/facebook/jsx/issues/65\\n- https://facebook.github.io/reason/\\n\\n\",\"frontmatter\":{\"title\":\"#2 - JSX 2.0\",\"date\":\"May 3, 2017\"}}},{\"node\":{\"fields\":{\"slug\":\"/001-react-fiber/\"},\"html\":\"<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320475678&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n<p>React Fiber is an ongoing reimplementation of React’s core algorithm. It is the culmination of over two years of research by the React team.</p>\\n<ul>\\n<li><a href=\\\"http://isfiberreadyyet.com\\\">http://isfiberreadyyet.com</a></li>\\n<li><a href=\\\"https://github.com/facebook/react/issues/7942\\\">https://github.com/facebook/react/issues/7942</a></li>\\n<li><a href=\\\"https://github.com/acdlite/react-fiber-architecture\\\">https://github.com/acdlite/react-fiber-architecture</a></li>\\n<li><a href=\\\"https://www.facebook.com/groups/2003630259862046/permalink/2054053404819731/\\\">https://www.facebook.com/groups/2003630259862046/permalink/2054053404819731/</a></li>\\n</ul>\\n<!-- end -->\\n<p><strong>Transcript</strong></p>\\n<p>The main idea behind React is full rerendering upon any change in data. However, as we all know, there is much more to React operation than that. An internal data structure called Virtual DOM comes into action to describe the appearance of our application.</p>\\n<p>When a page is loaded and the ReactDOM.render() function is called in our Javascript code, React builds a tree component, the Virtual DOM, which is then rendered and displayed by the browser.</p>\\n<p>By the way, the fact that the process of Virtual DOM construction is separate from the rendering itself gave rise to React Native, which renders into native mobile operating system components for iOS and Android.</p>\\n<p>So the Virtual DOM is constructed, stored in the memory and displayed on the screen. Then an event occurs that prompts React to perform a new Virtual DOM construction: for example, the “setState” method or the “forceUpdate” method is called. This new Virtual DOM is compared to the old one stored the application memory, the changes are evaluated, and a procedure is drawn up to update the actual DOM in the browser (or update the application screen in iOS or Android, if React Native is involved). </p>\\n<p>The algorithm of Virtual DOM comparison is called Reconciliation, and it contains a variety of optimization routines. For instance, if a tree component has been substituted by another one, the whole subtree is treated as a new one, and further comparison deeper into the tree is not performed. Another example of optimization is the key attribute essential for lists of nodes of the same type.</p>\\n<p>We thus have the core Reconciliation algorithm at our disposal, along with several rendering engines: for browsers, for iOS, and for Android.</p>\\n<p>Fiber is a new implementation of the algorithm still in development, based on two years of research and experiments. Although the Reconciliation and the rendering stages are separate, the final DOM and Native rendering engines will require some revision or rewriting in order to support the new architecture and make use of all the React Fiber advantages.</p>\\n<p>What are these advantages?</p>\\n<p>The current implementation implies traversing the tree recursively and calling all render() functions within the same tick of the Javascript event loop. The upcoming implementation may postpone calls to render() for some components (or subtrees) giving way to some desynchronization. For example, if a certain part of the application does not rely on the screen, why construct a Virtual DOM for it then? In addition, prioritized rendering would be helpful, so that high-priority tasks like user action animation would be carried out without skipping any frames, which would be achieved by postponing the less important tasks, such as displaying a large downloadable element of content. </p>\\n<p>What matters most when visualizing the user interface is maintaining smooth transitions and high FPS, and simultaneous rendering of all elements is by no means a must. However, React should smarten up in this case, so that calls to the render() function are planned correctly, and this is the very basis of the new React Fiber algorithm.</p>\\n<p>So we can conclude that Fiber’s primary goal is providing planning mechanisms. In particular, it should enable us to do the following:</p>\\n<ul>\\n<li>Pause a task to get back to it later</li>\\n<li>Set priorities for routines</li>\\n<li>Reuse the results of previous work</li>\\n<li>Halt a task if it is no longer needed</li>\\n</ul>\\n<p>The whole process of Virtual DOM construction then has to be broken down into smaller tasks which can be launched, paused and arranged by priority. From here arises the idea of a unit of work.</p>\\n<p>React has promoted the approach of pure functions for user interface rendering. Thus a particular component can be treated as a function of certain data that returns an instance of that component. However, as it can include other components, nested function calls are generated. If we put React aside and focus on functions that call each other, we end up with the idea of a stack. Every time a nested function call is made, a new stack frame is created to store the data for the function currently being executed.</p>\\n<p>What if React could manage this stack by itself, halt execution or prioritize certain functions? We would end up with a virtual stack machine. It would no longer be Javascript handling the function call stack, but React itself!</p>\\n<p>This approach has obvious performance drawbacks: apart from the overhead of implementing a specific Javascript stack machine, all data is stored in a heap, as opposed to a native Javascript stack, which is a bit less efficient.</p>\\n<p>On the other hand, if the function call tree is broken into smaller units of work, a dedicated stack implementation allows to set priorities for some functions with requestAnimationFrame, and postpone others in requestIdleCallback. As a bonus, the results of individual render functions can be reused, as they are no longer destroyed along with the native Javascript stack, but are in heap instead.</p>\\n<p>Fiber offers a few other handy benefits. One of them is the render() function returning an array of components, removing the need to group them into an additional div.</p>\\n<p>I will include some links to further technical specifications in the notes for this podcast.</p>\\n<p>An important aspect of the new React Fiber algorithm development is the support for all the features provided in the current version, including lifecycle hooks and such methods as setState, forceUpdate, and shouldComponentUpdate. It is still a work in progress, and React Fiber is the team’s main project and focus point for the rest of the year. Development progress is even tracked as percentage at isfiberreadyyet.com.</p>\\n<p>This is it for now. Code with React and prosper.</p>\",\"excerpt\":\"\\n<iframe width=\\\"100%\\\" height=\\\"166\\\" scrolling=\\\"no\\\" frameborder=\\\"no\\\" src=\\\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/320475678&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false\\\"></iframe>\\n\\nReact Fiber is an ongoing reimplementation of React's core algorithm. It is the culmination of over two years of research by the React team.\\n- http://isfiberreadyyet.com\\n- https://github.com/facebook/react/issues/7942\\n- https://github.com/acdlite/react-fiber-architecture\\n- https://www.facebook.com/groups/2003630259862046/permalink/2054053404819731/\\n\\n\\n\",\"frontmatter\":{\"title\":\"#1 - React Fiber\",\"date\":\"May 2, 2017\"}}}],\"pathPrefix\":\"\",\"first\":false,\"last\":true,\"index\":5,\"pageCount\":5,\"additionalContext\":{}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/5.json\n// module id = 427\n// module chunks = 81823991089174"],"sourceRoot":""}